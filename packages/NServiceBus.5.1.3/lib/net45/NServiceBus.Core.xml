<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Core</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.Bus">
            <summary>
            Factory for creating new bus instances 
            </summary>
        </member>
        <member name="M:NServiceBus.Bus.Create(NServiceBus.BusConfiguration)">
            <summary>
            Creates a bus instance with the given configuration
            </summary>
            <param name="configuration">The configuration to use</param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Bus.CreateSendOnly(NServiceBus.BusConfiguration)">
            <summary>
            Creates a bus instance to be used in send only mode
            </summary>
            <param name="configuration">The configuration to use</param>
            <returns></returns>
        </member>
        <member name="T:NServiceBus.BusConfiguration">
            <summary>
                Configuration used to create a bus instance
            </summary>
        </member>
        <member name="T:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings">
            <summary>
            Base class that exposes <see cref="T:NServiceBus.Settings.SettingsHolder"/> for extensibility.
            </summary>
        </member>
        <member name="M:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings.Settings">
            <summary>
            Get the current <see cref="T:NServiceBus.Settings.SettingsHolder"/> this <see cref="T:NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings"/> wraps.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.#ctor">
            <summary>
            Initializes a fresh instance of the builder
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.RegisterComponents(System.Action{NServiceBus.ObjectBuilder.IConfigureComponents})">
            <summary>
                Used to configure components in the container.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.TypesToScan(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Specifies the range of types that NServiceBus scans for handlers etc.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.AssembliesToScan(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                The assemblies to include when scanning for types.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.AssembliesToScan(System.Reflection.Assembly[])">
            <summary>
                The assemblies to include when scanning for types.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.ScanAssembliesInDirectory(System.String)">
            <summary>
                Specifies the directory where NServiceBus scans for types.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.CustomConfigurationSource(NServiceBus.Config.ConfigurationSource.IConfigurationSource)">
            <summary>
                Overrides the default configuration source.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.EndpointName(System.String)">
            <summary>
                Defines the name to use for this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.EndpointVersion(System.String)">
            <summary>
                Defines the version of this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.Conventions">
            <summary>
                Defines the conventions to use for this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.BusConfiguration.UseContainer``1(System.Action{NServiceBus.Container.ContainerCustomizations})">
            <summary>
                Defines a custom builder to use
            </summary>
            <typeparam name="T">The builder type</typeparam>
        </member>
        <member name="M:NServiceBus.BusConfiguration.UseContainer(System.Type)">
            <summary>
                Defines a custom builder to use
            </summary>
            <param name="definitionType">The type of the builder</param>
        </member>
        <member name="M:NServiceBus.BusConfiguration.UseContainer(NServiceBus.ObjectBuilder.Common.IContainer)">
            <summary>
                Uses an already active instance of a builder
            </summary>
            <param name="builder">The instance to use</param>
        </member>
        <member name="M:NServiceBus.BusConfiguration.OverridePublicReturnAddress(NServiceBus.Address)">
            <summary>
            Sets the public return address of this endpoint.
            </summary>
            <param name="address">The public address.</param>
        </member>
        <member name="M:NServiceBus.BusConfiguration.OverrideLocalAddress(System.String)">
            <summary>
            Sets the address of this endpoint.
            </summary>
            <param name="queue">The queue name.</param>
        </member>
        <member name="M:NServiceBus.BusConfiguration.BuildConfiguration">
            <summary>
                Creates the configuration object
            </summary>
        </member>
        <member name="P:NServiceBus.BusConfiguration.Pipeline">
            <summary>
                Access to the pipeline configuration
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureQueueCreation">
            <summary>
            Contains extension methods for <see cref="T:NServiceBus.BusConfiguration"/> that expose Queue creation settings.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureQueueCreation.DoNotCreateQueues(NServiceBus.BusConfiguration)">
            <summary>
            If queues configured do not exist, will cause them not to be created on startup.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureQueueCreation.CreateQueues(NServiceBus.Configure)">
            <summary>
            Gets whether or not queues should be created.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureInMemoryFaultManagement">
            <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
            <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureInMemoryFaultManagement.InMemoryFaultManagement(NServiceBus.Configure)">
            <summary>
            Use in-memory fault management.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureInMemoryFaultManagement.DiscardFailedMessagesInsteadOfSendingToErrorQueue(NServiceBus.BusConfiguration)">
            <summary>
            Use in-memory fault management.
            </summary>
        </member>
        <member name="T:NServiceBus.Container.ContainerCustomizations">
            <summary>
                Container customization.
            </summary>
        </member>
        <member name="P:NServiceBus.Container.ContainerCustomizations.Settings">
            <summary>
                The settings instance to use to store an existing container instance.
            </summary>
        </member>
        <member name="T:NServiceBus.Container.ContainerDefinition">
            <summary>
                Base class for container definitions.
            </summary>
        </member>
        <member name="M:NServiceBus.Container.ContainerDefinition.CreateContainer(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
                Implementers need to new up a new container.
            </summary>
            <param name="settings">The settings to check if an existing container exists.</param>
            <returns>The new container wrapper.</returns>
        </member>
        <member name="T:NServiceBus.ConventionsBuilder">
            <summary>
            Conventions builder class.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningMessagesAs(System.Func{System.Type,System.Boolean})">
            <summary>
                Sets the function to be used to evaluate whether a type is a message.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningCommandsAs(System.Func{System.Type,System.Boolean})">
            <summary>
                Sets the function to be used to evaluate whether a type is a commands.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningEventsAs(System.Func{System.Type,System.Boolean})">
            <summary>
                Sets the function to be used to evaluate whether a type is a event.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningEncryptedPropertiesAs(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
                Sets the function to be used to evaluate whether a property should be encrypted or not.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningDataBusPropertiesAs(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
                Sets the function to be used to evaluate whether a property should be sent via the DataBus or not.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningTimeToBeReceivedAs(System.Func{System.Type,System.TimeSpan})">
            <summary>
                Sets the function to be used to evaluate whether a message has a time to be received.
            </summary>
        </member>
        <member name="M:NServiceBus.ConventionsBuilder.DefiningExpressMessagesAs(System.Func{System.Type,System.Boolean})">
            <summary>
                Sets the function to be used to evaluate whether a type is an express message or not.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureCriticalErrorAction">
            <summary>
                Allow override critical error action
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.BusConfiguration,System.Action{System.String,System.Exception})">
            <summary>
                Sets the function to be used when critical error occurs.
            </summary>
            <param name="busConfiguration">The <see cref="T:NServiceBus.BusConfiguration"/> to extend.</param>
            <param name="onCriticalError">Assigns the action to perform on critical error.</param>
        </member>
        <member name="T:NServiceBus.Features.CriticalErrorHandling">
            <summary>
            Controls what happens when a critical error occurs.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Feature">
            <summary>
                Used to control the various features supported by the framework.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.#ctor">
            <summary>
                Creates an instance of <see cref="T:NServiceBus.Features.Feature"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Defaults(System.Action{NServiceBus.Settings.SettingsHolder})">
            <summary>
            Registers default settings
            </summary>
            <param name="settings">The settings holder</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
                Called when the features is activated
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Prerequisite(System.Func{NServiceBus.Features.FeatureConfigurationContext,System.Boolean},System.String)">
            <summary>
                Adds a setup prerequisite condition. If false this feature won't be setup.
                Prerequisites are only evaluated if the feature is enabled.
            </summary>
            <param name="condition">Condition that must be met in order for this feature to be activated.</param>
            <param name="description">Explanation of what this prerequisite checks.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.EnableByDefault">
            <summary>
                Marks this feature as enabled by default.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOn``1">
            <summary>
                Registers this feature as depending on the given feature. This means that this feature won't be activated unless
                the dependant feature is active.
                This also causes this feature to be activated after the other feature.
            </summary>
            <typeparam name="T">Feature that this feature depends on.</typeparam>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOn(System.String)">
            <summary>
                Registers this feature as depending on the given feature. This means that this feature won't be activated unless
                the dependant feature is active.
                This also causes this feature to be activated after the other feature.
            </summary>
            <param name="featureName">The name of the feature that this feature depends on.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOnAtLeastOne(System.Type[])">
            <summary>
                Register this feature as depending on at least on of the given features. This means that this feature won't be
                activated
                unless at least one of the provided features in the list is active.
                This also causes this feature to be activated after the other features.
            </summary>
            <param name="features">Features list that this feature require at least one of to be activated.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.DependsOnAtLeastOne(System.String[])">
            <summary>
                Register this feature as depending on at least on of the given features. This means that this feature won't be
                activated unless at least one of the provided features in the list is active.
                This also causes this feature to be activated after the other features.
            </summary>
            <param name="featureNames">The name of the features that this feature depends on.</param>
        </member>
        <member name="M:NServiceBus.Features.Feature.RegisterStartupTask``1">
            <summary>
                <see cref="T:NServiceBus.Features.FeatureStartupTask"/> that is executed when the <see cref="T:NServiceBus.Features.Feature"/> is started.
            </summary>
            <typeparam name="T">A <see cref="T:NServiceBus.Features.FeatureStartupTask"/>.</typeparam>
        </member>
        <member name="M:NServiceBus.Features.Feature.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:NServiceBus.Features.Feature.Name">
            <summary>
                Feature name.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Version">
            <summary>
                The version for this feature
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Dependencies">
            <summary>
                The list of features that this feature is depending on
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.IsEnabledByDefault">
            <summary>
                Tells if this feature is enabled by default
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.IsActive">
            <summary>
                Indicates that the feature is active
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.RegisteredDefaults">
            <summary>
            Access to the registered defaults
            </summary>
        </member>
        <member name="M:NServiceBus.Features.CriticalErrorHandling.#ctor">
            <summary>
            Initializes a enw instance of <see cref="T:NServiceBus.Features.CriticalErrorHandling"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.CriticalErrorHandling.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.CriticalError">
            <summary>
            A holder for that exposes access to the action defined by <see cref="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.Configure,System.Action{System.String,System.Exception})"/>.
            </summary>
            <returns>
            Call <see cref="M:NServiceBus.CriticalError.Raise(System.String,System.Exception)"/> to trigger the action.
            </returns>
        </member>
        <member name="M:NServiceBus.CriticalError.#ctor(System.Action{System.String,System.Exception},NServiceBus.Configure)">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.CriticalError"/>
            </summary>
            <param name="onCriticalErrorAction">The action to execute when a critical error is triggered.</param>
            <param name="configure">The <see cref="T:NServiceBus.Configure"/> instance.</param>
        </member>
        <member name="M:NServiceBus.CriticalError.Raise(System.String,System.Exception)">
            <summary>
            Trigger the action defined by <see cref="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.Configure,System.Action{System.String,System.Exception})"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureFileShareDataBus">
            <summary>
            Contains extension methods to <see cref="T:NServiceBus.BusConfiguration"/> for the file share data bus
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureFileShareDataBus.FileShareDataBus(NServiceBus.BusConfiguration,System.String)">
            <summary>
            Use the file-based databus implementation with the default binary serializer.
            </summary>
            <param name="config">The configuration.</param>
            <param name="basePath">The location to which to write/read serialized properties for the databus.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureFileShareDataBus.BasePath(NServiceBus.DataBus.DataBusExtentions{NServiceBus.FileShareDataBus},System.String)">
            <summary>
            The location to which to write/read serialized properties for the databus.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="basePath">The location to which to write/read serialized properties for the databus.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="T:NServiceBus.DataBus.DataBusDefinition">
            <summary>
            Defines a databus that can be used by NServiceBus
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.DataBusDefinition.ProvidedByFeature">
            <summary>
            The feature to enable when this databus is selected
            </summary>
        </member>
        <member name="T:NServiceBus.Features.DataBus">
            <summary>
            Used to configure the databus. 
            </summary>
        </member>
        <member name="M:NServiceBus.Features.DataBus.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
                Called when the features is activated
            </summary>
        </member>
        <member name="T:NServiceBus.Features.FeatureStartupTask">
            <summary>
            Base for feature startup tasks.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureStartupTask.OnStart">
            <summary>
            Will be called when the endpoint starts up if the feature has been activated.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureStartupTask.OnStop">
            <summary>
             Will be called when the endpoint stops and the feature is active.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.DataBusExtentions`1">
            <summary>
            This class provides implementers of databus with an extension mechanism for custom settings via extention methods.
            </summary>
            <typeparam name="T">The databus definition eg <see cref="T:NServiceBus.FileShareDataBus"/>.</typeparam>
        </member>
        <member name="T:NServiceBus.DataBus.DataBusExtentions">
            <summary>
            This class provides implementers of databus with an extension mechanism for custom settings via extention methods.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.DataBusExtentions.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.DataBusExtentions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:NServiceBus.FileShareDataBus">
            <summary>
            Base class for data bus definitions
            </summary>
        </member>
        <member name="M:NServiceBus.FileShareDataBus.ProvidedByFeature">
            <summary>
            The feature to enable when this databus is selected
            </summary>
        </member>
        <member name="T:NServiceBus.UseDataBusExtensions">
            <summary>
            Extension methods to configure data bus
            </summary>
        </member>
        <member name="M:NServiceBus.UseDataBusExtensions.UseDataBus``1(NServiceBus.BusConfiguration)">
            <summary>
            Configures NServiceBus to use the given data bus definition.
            </summary>
        </member>
        <member name="M:NServiceBus.UseDataBusExtensions.UseDataBus(NServiceBus.BusConfiguration,System.Type)">
            <summary>
            Configures NServiceBus to use a custom <see cref="T:NServiceBus.DataBus.IDataBus"/> implementation.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.IBehavior`1">
            <summary>
            This is the base interface to implement to create a behavior that can be registered in a pipeline.
            </summary>
            <typeparam name="TContext">The context that this behavior should receive.</typeparam>
        </member>
        <member name="M:NServiceBus.Pipeline.IBehavior`1.Invoke(`0,System.Action)">
            <summary>
            Called when the behavior is executed.
            </summary>
            <param name="context">The current context.</param>
            <param name="next">The next <see cref="T:NServiceBus.Pipeline.IBehavior`1"/> in the chain to execute.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.RegisterStep">
            <summary>
            Base class to do an advance registration of a step.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.#ctor(System.String,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NServiceBus.Pipeline.RegisterStep"/> class.
            </summary>
            <param name="stepId">The unique identifier for this steps.</param>
            <param name="behavior">The type of <see cref="T:NServiceBus.Pipeline.IBehavior`1"/> to register.</param>
            <param name="description">A brief description of what this step does.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertBeforeIfExists(NServiceBus.Pipeline.WellKnownStep)">
            <summary>
            Instructs the pipeline to register this step before the <paramref name="step"/> one. If the <paramref name="step"/> does not exist, this condition is ignored. 
            </summary>
            <param name="step">The <see cref="T:NServiceBus.Pipeline.WellKnownStep"/> that we want to insert before.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertBeforeIfExists(System.String)">
            <summary>
            Instructs the pipeline to register this step before the <paramref name="id"/> one. If the <paramref name="id"/> does not exist, this condition is ignored. 
            </summary>
            <param name="id">The unique identifier of the step that we want to insert before.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertBefore(NServiceBus.Pipeline.WellKnownStep)">
            <summary>
            Instructs the pipeline to register this step before the <paramref name="step"/> one.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertBefore(System.String)">
            <summary>
            Instructs the pipeline to register this step before the <paramref name="id"/> one.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertAfterIfExists(NServiceBus.Pipeline.WellKnownStep)">
            <summary>
            Instructs the pipeline to register this step after the <paramref name="step"/> one. If the <paramref name="step"/> does not exist, this condition is ignored. 
            </summary>
            <param name="step">The unique identifier of the step that we want to insert after.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertAfterIfExists(System.String)">
            <summary>
            Instructs the pipeline to register this step after the <paramref name="id"/> one. If the <paramref name="id"/> does not exist, this condition is ignored. 
            </summary>
            <param name="id">The unique identifier of the step that we want to insert after.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertAfter(NServiceBus.Pipeline.WellKnownStep)">
            <summary>
            Instructs the pipeline to register this step after the <paramref name="step"/> one.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.RegisterStep.InsertAfter(System.String)">
            <summary>
            Instructs the pipeline to register this step after the <paramref name="id"/> one.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.RegisterStep.StepId">
            <summary>
            Gets the unique identifier for this step.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.RegisterStep.Description">
            <summary>
            Gets the description for this registration.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.RegisterStep.BehaviorType">
            <summary>
            Gets the type of <see cref="T:NServiceBus.Pipeline.IBehavior`1"/> that is being registered.
            </summary>
        </member>
        <member name="T:NServiceBus.EncryptedValue">
            <summary>
            Class used to represent an encrypted value with an initialization vector.
            </summary>
        </member>
        <member name="P:NServiceBus.EncryptedValue.EncryptedBase64Value">
            <summary>
            The encrypted value represented as a Base64 string.
            </summary>
        </member>
        <member name="P:NServiceBus.EncryptedValue.Base64Iv">
            <summary>
            The initialization vector represented as a Base64 string.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Encryptor">
            <summary>
            Used to configure encryption.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Encryptor.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureRijndaelEncryptionService">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RijndaelEncryptionService(NServiceBus.BusConfiguration)">
            <summary>
            Use 256 bit AES encryption based on the Rijndael cipher. 
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RijndaelEncryptionService(NServiceBus.BusConfiguration,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Use 256 bit AES encryption based on the Rijndael cipher. 
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RegisterEncryptionService(NServiceBus.BusConfiguration,System.Func{NServiceBus.ObjectBuilder.IBuilder,NServiceBus.Encryption.IEncryptionService})">
            <summary>
            Register a custom <see cref="T:NServiceBus.Encryption.IEncryptionService"/> to be used for message encryption.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.RijndaelExpiredKey">
            <summary>
            A configuration element representing a Rijndael encryption key.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKey.Key">
            <summary>
            The keys value.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.RijndaelExpiredKeyCollection">
            <summary>
            A configuration element collection of <see cref="T:NServiceBus.Config.RijndaelExpiredKey"/>s.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:NServiceBus.Config.RijndaelExpiredKey"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new <see cref="T:NServiceBus.Config.RijndaelExpiredKey"/>, setting its <see cref="P:NServiceBus.Config.RijndaelExpiredKey.Key"/> property to the given value.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the Messages property of the given <see cref="T:NServiceBus.Config.RijndaelExpiredKey"/> element.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.IndexOf(NServiceBus.Config.RijndaelExpiredKey)">
            <summary>
            Calls BaseIndexOf on the given <see cref="T:NServiceBus.Config.RijndaelExpiredKey"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Add(NServiceBus.Config.RijndaelExpiredKey)">
            <summary>
            Calls BaseAdd.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Remove(NServiceBus.Config.RijndaelExpiredKey)">
            <summary>
            If the key exists, calls BaseRemove on it.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.RemoveAt(System.Int32)">
            <summary>
            Calls BaseRemoveAt.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Remove(System.String)">
            <summary>
            Calls BaseRemove.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.Clear">
            <summary>
            Calls BaseClear.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.RijndaelExpiredKeyCollection.IsReadOnly">
            <summary>
            True if the collection is readonly
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKeyCollection.CollectionType">
            <summary>
            Returns AddRemoveClearMap.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKeyCollection.Item(System.Int32)">
            <summary>
            Gets/sets the <see cref="T:NServiceBus.Config.RijndaelExpiredKey"/> at the given index.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelExpiredKeyCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NServiceBus.Config.RijndaelExpiredKey"/> for the given key.
            </summary>
        </member>
        <member name="T:NServiceBus.Encryption.IEncryptionService">
            <summary>
            Abstraction for encryption capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.Encryption.IEncryptionService.Encrypt(System.String)">
            <summary>
            Encrypts the given value returning an EncryptedValue.
            </summary>
        </member>
        <member name="M:NServiceBus.Encryption.IEncryptionService.Decrypt(NServiceBus.EncryptedValue)">
            <summary>
            Decrypts the given EncryptedValue object returning the source string.
            </summary>
        </member>
        <member name="T:NServiceBus.BusNotifications">
            <summary>
                Bus notifications.
            </summary>
        </member>
        <member name="P:NServiceBus.BusNotifications.Errors">
            <summary>
                Errors push-based notifications
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.FailedMessage">
            <summary>
            Error message event data.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.FailedMessage.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Exception)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Faults.FailedMessage"/>.
            </summary>
            <param name="headers">Message headers.</param>
            <param name="body">Message body.</param>
            <param name="exception">Exception thrown.</param>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.Headers">
            <summary>
                Gets the message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.Body">
            <summary>
                Gets a byte array to the body content of the message
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FailedMessage.Exception">
            <summary>
                The exception that caused this message to fail.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.ErrorsNotifications">
            <summary>
            Errors notifications
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.ErrorsNotifications.MessageSentToErrorQueue">
            <summary>
            Notification when a message is moved to the error queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.ErrorsNotifications.MessageHasFailedAFirstLevelRetryAttempt">
            <summary>
            Notification when a message fails a first level retry.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.ErrorsNotifications.MessageHasBeenSentToSecondLevelRetries">
            <summary>
            Notification when a message is sent to second level retires queue.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.FirstLevelRetry">
            <summary>
            first level retry event data.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.FirstLevelRetry.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Exception,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Faults.FirstLevelRetry"/>.
            </summary>
            <param name="headers">Message headers.</param>
            <param name="body">Message body.</param>
            <param name="exception">Exception thrown.</param>
            <param name="retryAttempt">Number of retry attempt</param>
        </member>
        <member name="P:NServiceBus.Faults.FirstLevelRetry.Headers">
            <summary>
                Gets the message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FirstLevelRetry.Body">
            <summary>
                Gets a byte array to the body content of the message
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FirstLevelRetry.Exception">
            <summary>
                The exception that caused this message to fail.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.FirstLevelRetry.RetryAttempt">
            <summary>
                Number of retry attempt.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.SecondLevelRetry">
            <summary>
            Second level retry event data.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.SecondLevelRetry.#ctor(System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Exception,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Faults.SecondLevelRetry"/>.
            </summary>
            <param name="headers">Message headers.</param>
            <param name="body">Message body.</param>
            <param name="exception">Exception thrown.</param>
            <param name="retryAttempt">Number of retry attempt</param>
        </member>
        <member name="P:NServiceBus.Faults.SecondLevelRetry.Headers">
            <summary>
                Gets the message headers.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.SecondLevelRetry.Body">
            <summary>
                Gets a byte array to the body content of the message
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.SecondLevelRetry.Exception">
            <summary>
                The exception that caused this message to fail.
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.SecondLevelRetry.RetryAttempt">
            <summary>
                Number of retry attempt.
            </summary>
        </member>
        <member name="T:NServiceBus.Configuration.AdvanceExtensibility.AdvanceExtensibilityExtensions">
            <summary>
            Extension methods declarations.
            </summary>
        </member>
        <member name="M:NServiceBus.Configuration.AdvanceExtensibility.AdvanceExtensibilityExtensions.GetSettings(NServiceBus.Configuration.AdvanceExtensibility.ExposeSettings)">
            <summary>
            Gives access to the <see cref="T:NServiceBus.Settings.SettingsHolder"/> for extensibility.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete">
            <summary>
            Implementors are invoked when configuration is complete.
            Implementors are resolved from the container so have access to full DI.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete.Run(NServiceBus.Configure)">
            <summary>
            Method invoked to run custom code.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.PrerequisiteStatus">
            <summary>
            The prerequisite status of a feature
            </summary>
        </member>
        <member name="P:NServiceBus.Features.PrerequisiteStatus.IsSatisfied">
            <summary>
            True if all prerequisites for the feature is satisfied
            </summary>
        </member>
        <member name="P:NServiceBus.Features.PrerequisiteStatus.Reasons">
            <summary>
            The list of reason why the prerequisites are not fullfilled if applicable
            </summary>
        </member>
        <member name="T:NServiceBus.Gateway.Deduplication.IDeduplicateMessages">
            <summary>
            Defines the api for storages that wants to provide storage for gateway deduplication
            </summary>
        </member>
        <member name="M:NServiceBus.Gateway.Deduplication.IDeduplicateMessages.DeduplicateMessage(System.String,System.DateTime)">
            <summary>
            Returns true if the message is a duplicate
            </summary>
            <param name="clientId">The client id that defines the range of ids to check for duplicates</param>
            <param name="timeReceived">The time received of the message to allow the storage to do cleanup</param>
        </member>
        <member name="T:NServiceBus.HostInfoConfigurationExtensions">
            <summary>
            Extension methods to configure hostid.
            </summary>
        </member>
        <member name="M:NServiceBus.HostInfoConfigurationExtensions.UniquelyIdentifyRunningInstance(NServiceBus.BusConfiguration)">
            <summary>
            Entry point for HostInfo related configuration
            </summary>
            <param name="config"><see cref="T:NServiceBus.Configure"/> instance.</param>
        </member>
        <member name="T:NServiceBus.HostInfoSettings">
            <summary>
                Configuration class for <see cref="T:NServiceBus.Hosting.HostInformation"/> settings.
            </summary>
        </member>
        <member name="M:NServiceBus.HostInfoSettings.UsingInstalledFilePath">
            <summary>
            In this mode, the host id is derived from the installed file path and the current machine name.
            </summary>
            <remarks>
            This mode is only recommended if upgrades are deployed always to the same path.
            When using <a href="https://octopusdeploy.com/">Octupus Deploy</a> do not use this mode, instead use <see cref="M:NServiceBus.HostInfoSettings.UsingNames(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:NServiceBus.HostInfoSettings.UsingCustomIdentifier(System.Guid)">
            <summary>
            In this mode, the host id is fully managed by the user.
            </summary>
            <remarks>
            This mode is only recommended if you know what you are doing.
            The id should be the same across endpoint restarts unless physical host has changed.
            </remarks>
        </member>
        <member name="M:NServiceBus.HostInfoSettings.UsingNames(System.String,System.String)">
            <summary>
            In this mode, a host id will be generated from <paramref name="instanceName"/> and <paramref name="hostName"/>.
            </summary>
            <remarks>
            This mode is recommended when deplying in Azure roles or <see cref="M:NServiceBus.HostInfoSettings.UsingInstalledFilePath"/> is not appropriate.
            </remarks>
        </member>
        <member name="T:NServiceBus.IBus_Obsoletes">
            <summary>
            Obsoleted IBus methods
            </summary>
        </member>
        <member name="M:NServiceBus.IBus_Obsoletes.CreateInstance``1(NServiceBus.IBus)">
            <summary>
            Creates an instance of the message type T.
            </summary>
            <typeparam name="T">The type of message interface to instantiate.</typeparam>
            <returns>A message object that implements the interface T.</returns>
        </member>
        <member name="M:NServiceBus.IBus_Obsoletes.CreateInstance``1(NServiceBus.IBus,System.Action{``0})">
            <summary>
            Creates an instance of the message type T and fills it with data.
            </summary>
            <typeparam name="T">The type of message interface to instantiate.</typeparam>
            <param name="bus">The bus</param>
            <param name="action">An action to set various properties of the instantiated object.</param>
            <returns>A message object that implements the interface T.</returns>
        </member>
        <member name="M:NServiceBus.IBus_Obsoletes.CreateInstance(NServiceBus.IBus,System.Type)">
            <summary>
            Creates an instance of the given message type.
            </summary>
            <param name="bus">The bus</param>
            <param name="messageType">The type of message to instantiate.</param>
            <returns>A message object that implements the given interface.</returns>
        </member>
        <member name="T:NServiceBus.IManageMessageHeaders">
            <summary>
            <see cref="T:NServiceBus.IBus"/> implementers should also implement this interface to support get/set of headers for current message.
            </summary>
        </member>
        <member name="P:NServiceBus.IManageMessageHeaders.SetHeaderAction">
            <summary>
            The <see cref="T:System.Action`3"/> used to set the header in the bus.SetMessageHeader(msg, key, value) method.
            </summary>
        </member>
        <member name="P:NServiceBus.IManageMessageHeaders.GetHeaderAction">
            <summary>
            The <see cref="T:System.Func`3"/> used to get the header value in the bus.GetMessageHeader(msg, key) method.
            </summary>
        </member>
        <member name="T:NServiceBus.INeedInitialization">
            <summary>
            Indicate that the implementing class will specify configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.INeedInitialization.Customize(NServiceBus.BusConfiguration)">
            <summary>
            Allows to override default settings.
            </summary>
            <param name="configuration">Endpoint configuration builder.</param>
        </member>
        <member name="T:NServiceBus.Features.InstallationSupport">
            <summary>
            Provides support for running installers
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InstallationSupport.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated
            </summary>
            <param name="context">The feature context</param>
        </member>
        <member name="T:NServiceBus.InstallConfigExtensions">
            <summary>
            Convenience methods for configuring how instances of  <see cref="T:NServiceBus.Installation.INeedToInstallSomething"/>s are run.
            </summary>
        </member>
        <member name="M:NServiceBus.InstallConfigExtensions.EnableInstallers(NServiceBus.BusConfiguration,System.String)">
            <summary>
            Enable all <see cref="T:NServiceBus.Installation.INeedToInstallSomething"/> to run when <see cref="T:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete"/>.
            </summary>
            <param name="config">The instance of <see cref="T:NServiceBus.BusConfiguration"/> to apply these settings to.</param>
            <param name="username">The username to pass to <see cref="M:NServiceBus.Installation.INeedToInstallSomething.Install(System.String,NServiceBus.Configure)"/></param>
        </member>
        <member name="T:NServiceBus.ISendOnlyBus">
            <summary>
            Provides the subset of bus operations that is applicable for a send only bus
            </summary>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Publish``1(``0)">
            <summary>
            Publish the message to subscribers.
            </summary>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Publish``1">
            <summary>
            Publish the message to subscribers.
            </summary>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Publish``1(System.Action{``0})">
            <summary>
            Instantiates a message of type T and publishes it.
            </summary>
            <typeparam name="T">The type of message, usually an interface</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message</param>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send(System.Object)">
            <summary>
            Sends the provided message.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send``1(System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it.
            </summary>
            <typeparam name="T">The type of message, usually an interface</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message</param>
            <remarks>
            The message will be sent to the destination configured for T
            </remarks>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send(System.String,System.Object)">
            <summary>
            Sends the message.
            </summary>
            <param name="destination">
            The address of the destination to which the message will be sent.
            </param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send(NServiceBus.Address,System.Object)">
            <summary>
            Sends the provided message.
            </summary>
            <param name="address">
            The address to which the message will be sent.
            </param>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send``1(System.String,System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it to the given destination.
            </summary>
            <typeparam name="T">The type of message, usually an interface</typeparam>
            <param name="destination">The destination to which the message will be sent.</param>
            <param name="messageConstructor">An action which initializes properties of the message</param>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send``1(NServiceBus.Address,System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it to the given address.
            </summary>
            <typeparam name="T">The type of message, usually an interface</typeparam>
            <param name="address">The address to which the message will be sent.</param>
            <param name="messageConstructor">An action which initializes properties of the message</param>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send(System.String,System.String,System.Object)">
            <summary>
            Sends the message to the destination as well as identifying this
            as a response to a message containing the Id found in correlationId.
            </summary>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send(NServiceBus.Address,System.String,System.Object)">
            <summary>
            Sends the message to the given address as well as identifying this
            as a response to a message containing the Id found in correlationId.
            </summary>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send``1(System.String,System.String,System.Action{``0})">
            <summary>
            Instantiates a message of the type T using the given messageConstructor,
            and sends it to the destination identifying it as a response to a message
            containing the Id found in correlationId.
            </summary>
        </member>
        <member name="M:NServiceBus.ISendOnlyBus.Send``1(NServiceBus.Address,System.String,System.Action{``0})">
            <summary>
            Instantiates a message of the type T using the given messageConstructor,
            and sends it to the given address identifying it as a response to a message
            containing the Id found in correlationId.
            </summary>
        </member>
        <member name="P:NServiceBus.ISendOnlyBus.OutgoingHeaders">
            <summary>
            Gets the list of key/value pairs that will be in the header of
            messages being sent by the same thread.
            
            This value will be cleared when a thread receives a message.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureLicenseExtensions">
            <summary>
            Contains extension methods to configure license.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureLicenseExtensions.License(NServiceBus.BusConfiguration,System.String)">
            <summary>
            Allows user to specify the license string.
            </summary>
            <param name="config">The current <see cref="T:NServiceBus.BusConfiguration"/>.</param>
            <param name="licenseText">The license text.</param>
        </member>
        <member name="M:NServiceBus.ConfigureLicenseExtensions.LicensePath(NServiceBus.BusConfiguration,System.String)">
            <summary>
            Allows user to specify the path for the license file.
            </summary>
            <param name="config">The current <see cref="T:NServiceBus.BusConfiguration"/>.</param>
            <param name="licenseFile">A relative or absolute path to the license file.</param>
        </member>
        <member name="T:NServiceBus.Logging.DefaultFactory">
            <summary>
            The default <see cref="T:NServiceBus.Logging.LoggingFactoryDefinition"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.LoggingFactoryDefinition">
            <summary>
            Base class for logging definitions
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LoggingFactoryDefinition.GetLoggingFactory">
            <summary>
            Constructs an instance of <see cref="T:NServiceBus.Logging.ILoggerFactory"/> for use by <see cref="M:NServiceBus.Logging.LogManager.Use``1"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Logging.DefaultFactory"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.GetLoggingFactory">
            <summary>
            <see cref="M:NServiceBus.Logging.LoggingFactoryDefinition.GetLoggingFactory"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.Level(NServiceBus.Logging.LogLevel)">
            <summary>
            Controls the <see cref="T:NServiceBus.Logging.LogLevel"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.DefaultFactory.Directory(System.String)">
            <summary>
            The directory to log files to.
            </summary>
        </member>
        <member name="T:NServiceBus.CriticalTimeMonitoringConfig">
            <summary>
            Provide configuration options for monitoring related settings.
            </summary>
        </member>
        <member name="M:NServiceBus.CriticalTimeMonitoringConfig.EnableCriticalTimePerformanceCounter(NServiceBus.BusConfiguration)">
            <summary>
            Enables the NServiceBus specific performance counters.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.CriticalTimeMonitoring">
            <summary>
            Used to configure CriticalTimeMonitoring.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.CriticalTimeMonitoring.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.SLAMonitoringConfig">
            <summary>
            Provide configuration options for monitoring related settings.
            </summary>
        </member>
        <member name="M:NServiceBus.SLAMonitoringConfig.EnableSLAPerformanceCounter(NServiceBus.BusConfiguration,System.TimeSpan)">
            <summary>
            Enables the NServiceBus specific performance counters with a specific EndpointSLA.
            </summary>
        </member>
        <member name="M:NServiceBus.SLAMonitoringConfig.EnableSLAPerformanceCounter(NServiceBus.BusConfiguration)">
            <summary>
            Enables the NServiceBus specific performance counters with a specific EndpointSLA.
            </summary>
        </member>
        <member name="T:NServiceBus.Address">
            <summary>
             Abstraction for an address on the NServiceBus network.
            </summary>
        </member>
        <member name="F:NServiceBus.Address.Undefined">
            <summary>
            Undefined address.
            </summary>
        </member>
        <member name="F:NServiceBus.Address.Self">
            <summary>
            Self address.
            </summary>
        </member>
        <member name="M:NServiceBus.Address.InitializeLocalAddress(System.String)">
            <summary>
            Sets the address of this endpoint.
            </summary>
            <param name="queue">The queue name.</param>
        </member>
        <member name="M:NServiceBus.Address.OverridePublicReturnAddress(NServiceBus.Address)">
            <summary>
            Sets the public return address of this endpoint.
            </summary>
            <param name="address">The public address.</param>
        </member>
        <member name="M:NServiceBus.Address.OverrideDefaultMachine(System.String)">
            <summary>
            Sets the address mode, can only be done as long as the local address is not been initialized.By default the default machine equals Environment.MachineName
            </summary>
            <param name="machineName">The machine name.</param>
        </member>
        <member name="M:NServiceBus.Address.IgnoreMachineName">
            <summary>
            Instructed the address to not consider the machine name
            </summary>
        </member>
        <member name="M:NServiceBus.Address.Parse(System.String)">
            <summary>
            Parses a string and returns an Address.
            </summary>
            <param name="destination">The full address to parse.</param>
            <returns>A new instance of <see cref="T:NServiceBus.Address"/>.</returns>
        </member>
        <member name="M:NServiceBus.Address.#ctor(System.String,System.String)">
             <summary>
             Instantiate a new Address for a known queue on a given machine.
             </summary>
            <param name="queueName">The queue name.</param>
            <param name="machineName">The machine name.</param>
        </member>
        <member name="M:NServiceBus.Address.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes an Address.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
        </member>
        <member name="M:NServiceBus.Address.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:NServiceBus.Address.SubScope(System.String)">
            <summary>
            Creates a new Address whose Queue is derived from the Queue of the existing Address
            together with the provided qualifier. For example: queue.qualifier@machine
            </summary>
        </member>
        <member name="M:NServiceBus.Address.GetHashCode">
            <summary>
            Provides a hash code of the Address.
            </summary>
        </member>
        <member name="M:NServiceBus.Address.ToString">
            <summary>
            Returns a string representation of the address.
            </summary>
        </member>
        <member name="M:NServiceBus.Address.op_Equality(NServiceBus.Address,NServiceBus.Address)">
            <summary>
            Overloading for the == for the class Address
            </summary>
            <param name="left">Left hand side of == operator</param>
            <param name="right">Right hand side of == operator</param>
            <returns>true if the LHS is equal to RHS</returns>
        </member>
        <member name="M:NServiceBus.Address.op_Inequality(NServiceBus.Address,NServiceBus.Address)">
            <summary>
            Overloading for the != for the class Address
            </summary>
            <param name="left">Left hand side of != operator</param>
            <param name="right">Right hand side of != operator</param>
            <returns>true if the LHS is not equal to RHS</returns>
        </member>
        <member name="M:NServiceBus.Address.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:NServiceBus.Address.Equals(NServiceBus.Address)">
            <summary>
            Check this is equal to other Address
            </summary>
            <param name="other">reference addressed to be checked with this</param>
            <returns>true if this is equal to other</returns>
        </member>
        <member name="P:NServiceBus.Address.Local">
            <summary>
            Get the address of this endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.Address.Queue">
            <summary>
            The (lowercase) name of the queue not including the name of the machine or location depending on the address mode.
            </summary>
        </member>
        <member name="P:NServiceBus.Address.Machine">
            <summary>
            The (lowercase) name of the machine or the (normal) name of the location depending on the address mode.
            </summary>
        </member>
        <member name="T:NServiceBus.AddressMode">
            <summary>
            Determines how the azure location behaves
            </summary>
        </member>
        <member name="F:NServiceBus.AddressMode.Local">
            <summary>
            Addressing behavior is confirm to local queuing policies, eg. MSMQ
            </summary>
        </member>
        <member name="F:NServiceBus.AddressMode.Remote">
            <summary>
            Addressing behavior is confirm to remote queuing policies, eg. Azure
            </summary>
        </member>
        <member name="T:NServiceBus.AllAssemblies">
            <summary>
            Class for specifying which assemblies not to load.
            </summary>
        </member>
        <member name="T:NServiceBus.IExcludesBuilder">
            <summary>
            Supporting the fluent interface in <seealso cref="T:NServiceBus.AllAssemblies"/>
            </summary>
        </member>
        <member name="M:NServiceBus.IExcludesBuilder.And(System.String)">
            <summary>
            Indicate that the given assembly expression should also be excluded.
            You can call this method multiple times.
            </summary>
        </member>
        <member name="T:NServiceBus.IIncludesBuilder">
            <summary>
            Supporting the fluent interface in <seealso cref="T:NServiceBus.AllAssemblies"/>
            </summary>
        </member>
        <member name="M:NServiceBus.IIncludesBuilder.And(System.String)">
            <summary>
            Indicate that assemblies matching the given expression should also be included.
            You can call this method multiple times.
            </summary>
        </member>
        <member name="M:NServiceBus.IIncludesBuilder.Except(System.String)">
            <summary>
            Indicate that assemblies matching the given expression should be excluded.
            Use the 'And' method to indicate other assemblies to be skipped.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.Except(System.String)">
            <summary>
            Indicate that assemblies matching the given expression are not to be used.
            Use the 'And' method to indicate other assemblies to be skipped.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.Matching(System.String)">
            <summary>
            Indicate that assemblies matching the given expression are to be used.
            Use the 'And' method to indicate other assemblies to be included.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.GetEnumerator">
            <summary>
            Returns an enumerator for looping over the assemblies to be loaded.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return a non-generic enumerator.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Audit">
            <summary>
            Enabled message auditing for this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Audit.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.AutoSubscribe">
            <summary>
            Used to configure auto subscriptions.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.AutoSubscribe.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.AutoSubscribeSettingsExtensions">
            <summary>
            Adds support for custom configuration of the auto subscribe feature
            </summary>
        </member>
        <member name="M:NServiceBus.AutoSubscribeSettingsExtensions.AutoSubscribe(NServiceBus.BusConfiguration)">
            <summary>
            Use this method to change how auto subscribe works
            </summary>
        </member>
        <member name="T:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings">
            <summary>
            Provides fine grained control over auto subscribe
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.DoNotAutoSubscribeSagas">
            <summary>
            Turns off auto subscriptions for sagas. Sagas where not auto subscribed by default before v4
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.DoNotRequireExplicitRouting">
            <summary>
            Allows to endpoint to subscribe to messages owned by the local endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.AutoSubscribePlainMessages">
            <summary>
            Turns on auto-subscriptions for messages not marked as commands. This was the default before v4
            </summary>
        </member>
        <member name="T:NServiceBus.CompletionResult">
            <summary>
            The object found in <see cref="T:System.IAsyncResult"/>.AsyncState returned by the <see cref="T:System.AsyncCallback"/> 
            passed to the Send method of the bus.
            </summary>
        </member>
        <member name="P:NServiceBus.CompletionResult.ErrorCode">
            <summary>
            If <see cref="M:NServiceBus.IBus.Return``1(``0)"/> was called, this contains the value passed to it.
            </summary>
        </member>
        <member name="P:NServiceBus.CompletionResult.Messages">
            <summary>
            If <see cref="M:NServiceBus.IBus.Reply(System.Object)"/> was called, this contains the messages passed to it.
            </summary>
        </member>
        <member name="P:NServiceBus.CompletionResult.State">
            <summary>
            An object that can contain state information for the method.
            </summary>
        </member>
        <member name="T:NServiceBus.Configure">
            <summary>
                Central configuration entry point.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.DefineEndpointName(System.String)">
            <summary>
                Sets the function that specified the name of this endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.#ctor(NServiceBus.Settings.SettingsHolder,NServiceBus.ObjectBuilder.Common.IContainer,System.Collections.Generic.List{System.Action{NServiceBus.ObjectBuilder.IConfigureComponents}},NServiceBus.Pipeline.PipelineSettings)">
            <summary>
                Creates a new instance of <see cref="T:NServiceBus.Configure"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.ForAllTypes``1(System.Collections.Generic.IEnumerable{System.Type},System.Action{System.Type})">
            <summary>
                Applies the given action to all the scanned types that can be assigned to <typeparamref name="T" />.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.Configurer">
            <summary>
            Gets/sets the object used to configure components.
            This object should eventually reference the same container as the Builder.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.Settings">
            <summary>
                Provides access to the settings holder
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.Builder">
            <summary>
                Gets the builder.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.TypesToScan">
            <summary>
                Returns types in assemblies found in the current directory.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.LocalAddress">
            <summary>
            Returns the queue name of this endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.AuditConfig">
            <summary>
            Config section for the auditing feature
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AuditConfig.QueueName">
            <summary>
            Gets/sets the address to which messages received will be forwarded.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AuditConfig.OverrideTimeToBeReceived">
            <summary>
            Gets/sets the time to be received set on forwarded messages
            </summary>
        </member>
        <member name="T:NServiceBus.ContentTypes">
            <summary>
            Contains message body content type definitions.
            </summary>
        </member>
        <member name="F:NServiceBus.ContentTypes.Bson">
            <summary>
            Indicates that the content type is "application/bson"
            </summary>
        </member>
        <member name="F:NServiceBus.ContentTypes.Binary">
            <summary>
            Indicates that the content type is "application/binary"
            </summary>
        </member>
        <member name="F:NServiceBus.ContentTypes.Json">
            <summary>
            Indicates that the content type is "application/json"
            </summary>
        </member>
        <member name="F:NServiceBus.ContentTypes.Xml">
            <summary>
            Indicates that the content type is "text/xml"
            </summary>
        </member>
        <member name="T:NServiceBus.DataBusProperty`1">
            <summary>
            Default implementation for <see cref="T:NServiceBus.IDataBusProperty"/>.
            </summary>
            <typeparam name="T">Type of data to store in <see cref="T:NServiceBus.IDataBusProperty"/>.</typeparam>
        </member>
        <member name="T:NServiceBus.IDataBusProperty">
            <summary>
            The contract to implement a <see cref="T:NServiceBus.IDataBusProperty"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.IDataBusProperty.GetValue">
            <summary>
            Gets the value of the <see cref="T:NServiceBus.IDataBusProperty"/>.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="M:NServiceBus.IDataBusProperty.SetValue(System.Object)">
            <summary>
            Sets the value for <see cref="T:NServiceBus.IDataBusProperty"/>.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="P:NServiceBus.IDataBusProperty.Key">
            <summary>
            The <see cref="T:NServiceBus.IDataBusProperty"/> key.
            </summary>
        </member>
        <member name="P:NServiceBus.IDataBusProperty.HasValue">
            <summary>
            <code>true</code> if <see cref="T:NServiceBus.IDataBusProperty"/> has a value.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.#ctor(`0)">
            <summary>
            initializes a <see cref="T:NServiceBus.DataBusProperty`1"/> with the <paramref name="value"/>.
            </summary>
            <param name="value">The value to initialise with.</param>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For serialization purposes.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.SetValue(System.Object)">
            <summary>
            Sets the value for <see cref="T:NServiceBus.IDataBusProperty"/>.
            </summary>
            <param name="valueToSet">The value to set.</param>
        </member>
        <member name="M:NServiceBus.DataBusProperty`1.GetValue">
            <summary>
            Gets the value of the <see cref="T:NServiceBus.IDataBusProperty"/>.
            </summary>
            <returns>The value</returns>
        </member>
        <member name="P:NServiceBus.DataBusProperty`1.Key">
            <summary>
            The <see cref="T:NServiceBus.IDataBusProperty"/> key.
            </summary>
        </member>
        <member name="P:NServiceBus.DataBusProperty`1.HasValue">
            <summary>
            <code>true</code> if <see cref="T:NServiceBus.IDataBusProperty"/> has a value.
            </summary>
        </member>
        <member name="P:NServiceBus.DataBusProperty`1.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="T:NServiceBus.IWantToRunBeforeConfigurationIsFinalized">
            <summary>
            Indicates that this class contains logic that needs to run just before
            configuration is finalized
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunBeforeConfigurationIsFinalized.Run(NServiceBus.Configure)">
            <summary>
            Invoked before configuration is finalized and locked
            </summary>
        </member>
        <member name="T:NServiceBus.ExpressAttribute">
            <summary>
            Attribute to indicate that the message should not be written to disk.
            This will make the message vulnerable to server crashes or restarts.
            </summary>
        </member>
        <member name="T:NServiceBus.ExtensionMethods">
            <summary>
            Class containing extension methods for base class libraries for using interface-based messages.
            </summary>
        </member>
        <member name="M:NServiceBus.ExtensionMethods.GetMessageHeader(NServiceBus.IBus,System.Object,System.String)">
            <summary>
            Get the header with the given key. Cannot be used to change its value.
            </summary>
            <param name="bus">The <see cref="T:NServiceBus.IBus"/>.</param>
            <param name="msg">The message to retrieve a header from.</param>
            <param name="key">The header key.</param>
            <returns>The value assigned to the header.</returns>
        </member>
        <member name="M:NServiceBus.ExtensionMethods.SetMessageHeader(NServiceBus.ISendOnlyBus,System.Object,System.String,System.String)">
            <summary>
            Sets the value of the header for the given key.
            </summary>
            <param name="bus">The <see cref="T:NServiceBus.IBus"/>.</param>
            <param name="msg">The message to add a header to.</param>
            <param name="key">The header key.</param>
            <param name="value">The value to assign to the header.</param>
        </member>
        <member name="M:NServiceBus.ExtensionMethods.GetHeader(NServiceBus.IMessage,System.String)">
            <summary>
            Get the header with the given key. Cannot be used to change its value.
            </summary>
            <param name="msg">The <see cref="T:NServiceBus.IMessage"/> to retrieve a header from.</param>
            <param name="key">The header key.</param>
            <returns>The value assigned to the header.</returns>
        </member>
        <member name="M:NServiceBus.ExtensionMethods.SetHeader(NServiceBus.IMessage,System.String,System.String)">
            <summary>
            Sets the value of the header for the given key.
            </summary>
            <param name="msg">The <see cref="T:NServiceBus.IMessage"/> to add a header to.</param>
            <param name="key">The header key.</param>
            <param name="value">The value to assign to the header.</param>
        </member>
        <member name="P:NServiceBus.ExtensionMethods.CurrentMessageBeingHandled">
            <summary>
            The object used to see whether headers requested are for the handled message.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.FeatureConfigurationContext">
            <summary>
            The context available to features when they are activated
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureConfigurationContext.Settings">
            <summary>
            A read only copy of the settings
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureConfigurationContext.Container">
            <summary>
            Access to the container to allow for registrations
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureConfigurationContext.Pipeline">
            <summary>
            Access to the pipeline in order to customize it
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigurationBuilderExtensions">
            <summary>
            Extension methods declarations.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurationBuilderExtensions.EnableFeature``1(NServiceBus.BusConfiguration)">
            <summary>
            Enables the given feature
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurationBuilderExtensions.EnableFeature(NServiceBus.BusConfiguration,System.Type)">
            <summary>
            Enables the given feature
            </summary>
            <param name="config"></param>
            <param name="featureType">The feature to enable</param>
        </member>
        <member name="M:NServiceBus.ConfigurationBuilderExtensions.DisableFeature``1(NServiceBus.BusConfiguration)">
            <summary>
            Disables the given feature
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurationBuilderExtensions.DisableFeature(NServiceBus.BusConfiguration,System.Type)">
            <summary>
            Enables the given feature
            </summary>
            <param name="config"></param>
            <param name="featureType">The feature to disable</param>
        </member>
        <member name="T:NServiceBus.Features.SettingsExtentions">
            <summary>
            Feature related extentions to the settings
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SettingsExtentions.EnableFeatureByDefault``1(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Marks the given feature as enabled by default
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SettingsExtentions.EnableFeatureByDefault(NServiceBus.Settings.SettingsHolder,System.Type)">
            <summary>
            Marks the given feature as enabled by default
            </summary>
        </member>
        <member name="T:NServiceBus.First`1">
            <summary>
            Used to indicate the order in which handler types are to run.
            
            Not thread safe.
            </summary>
            <typeparam name="T">The type which will run first.</typeparam>
        </member>
        <member name="M:NServiceBus.First`1.Then``1">
            <summary>
            Specifies the type which will run next.
            </summary>
        </member>
        <member name="M:NServiceBus.First`1.AndThen``1">
            <summary>
            Specifies the type which will run next
            </summary>
        </member>
        <member name="P:NServiceBus.First`1.Types">
            <summary>
            Returns the ordered list of types specified.
            </summary>
        </member>
        <member name="T:NServiceBus.ISpecifyMessageHandlerOrdering">
            <summary>
            Specify the order in which message handlers will be invoked.
            </summary>
        </member>
        <member name="M:NServiceBus.ISpecifyMessageHandlerOrdering.SpecifyOrder(NServiceBus.Order)">
            <summary>
            In this method, use the order object to specify the order 
            in which message handlers will be activated.
            </summary>
        </member>
        <member name="T:NServiceBus.Order">
            <summary>
            Used to specify the order in which message handlers will be activated.
            </summary>
        </member>
        <member name="M:NServiceBus.Order.SpecifyFirst``1">
            <summary>
            Specifies that the given type will be activated before all others.
            </summary>
        </member>
        <member name="M:NServiceBus.Order.Specify``1(NServiceBus.First{``0})">
            <summary>
            Specifies an ordering of multiple types using the syntax: <code>First{H1}.Then{H2}().AndThen{H3}()</code> etc
            </summary>
        </member>
        <member name="M:NServiceBus.Order.Specify(System.Type[])">
            <summary>
            Specifies an ordering of multiple types directly, where ordering may be decided dynamically at runtime.
            </summary>
        </member>
        <member name="P:NServiceBus.Order.Types">
            <summary>
             Gets the types whose order has been specified.
            </summary>
        </member>
        <member name="T:NServiceBus.Headers">
            <summary>
            Static class containing headers used by NServiceBus.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HttpFrom">
            <summary>
            Header for retrieving from which Http endpoint the message arrived.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HttpTo">
            <summary>
            Header for specifying to which Http endpoint the message should be delivered.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.RouteTo">
            <summary>
            Header for specifying to which queue behind the http gateway should the message be delivered.
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.DestinationSites">
            <summary>
            Header for specifying to which sites the gateway should send the message. For multiple
            sites a comma separated list can be used
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingSite">
            <summary>
            Header for specifying the key for the site where this message originated. 
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SagaId">
            <summary>
            Header containing the id of the saga instance the sent the message
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.InvokedSagas">
            <summary>
            Header containing a list of saga types and ids that this message invoked, the format is "{sagatype}={sagaid};{sagatype}={sagaid}"
            This header is considered an applicative header.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.MessageId">
            <summary>
            Header containing a stable message id for a message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.CorrelationId">
            <summary>
            Header containing a correlation id for a message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ReplyToAddress">
            <summary>
            Header containing the ReplyToAddress for a message.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HeaderName">
            <summary>
            Prefix included on the wire when sending applicative headers.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.WindowsIdentityName">
            <summary>
            Header containing the windows identity name
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.NServiceBusVersion">
            <summary>
            Header telling the NServiceBus Version (beginning NServiceBus V3.0.1).
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ReturnMessageErrorCodeHeader">
            <summary>
            Used in a header when doing a callback (bus.return)
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ControlMessageHeader">
            <summary>
            Header that tells if this transport message is a control message
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SagaType">
            <summary>
            Type of the saga that this message is targeted for
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingSagaId">
            <summary>
            Id of the saga that sent this message
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingSagaType">
            <summary>
            Type of the saga that sent this message
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.Retries">
            <summary>
            The number of second-level retries that has been performed for this message
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.FLRetries">
            <summary>
            The number of first-level retries that has been performed for this message
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingStarted">
            <summary>
            The time processing of this message started
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingEnded">
            <summary>
            The time processing of this message ended
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.TimeSent">
            <summary>
            The time this message was sent from the client
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.RelatedTo">
            <summary>
            Id of the message that caused this message to be sent
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.EnclosedMessageTypes">
            <summary>
            Header entry key indicating the types of messages contained.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ContentType">
            <summary>
            Header entry key indicating format of the payload
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.SubscriptionMessageType">
            <summary>
            Header entry key for the given message type that is being subscribed to, when message intent is subscribe or unsubscribe.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.IsSagaTimeoutMessage">
            <summary>
            True if this message is a saga timeout
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.IsDeferredMessage">
            <summary>
            True if this is a deferred message
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingEndpoint">
            <summary>
            Name of the endpoint where the given message originated
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingMachine">
            <summary>
            Machine name of the endpoint where the given message originated
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingHostId">
            <summary>
            HostId of the endpoint where the given message originated
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingEndpoint">
            <summary>
            Name of the endpoint where the given message was processed (success or failure)
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ProcessingMachine">
            <summary>
            Machine name of the endpoint where the given message was processed (success or failure)
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HostDisplayName">
            <summary>
            The display name of the host where the given message was processed (success or failure), eg the MachineName.
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HostId">
            <summary>
            HostId of the endpoint where the given message was processed (success or failure)
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.HasLicenseExpired">
            <summary>
            HostId of the endpoint where the given message was processed (success or failure)
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.OriginatingAddress">
            <summary>
            The original reply to address for successfully processed messages
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.ConversationId">
            <summary>
            The id of the message conversation that this message is part of
            </summary>
        </member>
        <member name="F:NServiceBus.Headers.MessageIntent">
            <summary>
            The intent of the current message
            </summary>
        </member>
        <member name="M:NServiceBus.Headers.GetMessageHeader(System.Object,System.String)">
            <summary>
            Get the header with the given key. Cannot be used to change its value.
            </summary>
            <param name="msg">The message to retrieve a header from.</param>
            <param name="key">The header key.</param>
            <returns>The value assigned to the header.</returns>
        </member>
        <member name="M:NServiceBus.Headers.SetMessageHeader(System.Object,System.String,System.String)">
            <summary>
            Sets the value of the header for the given key.
            </summary>
            <param name="msg">The message to add a header to.</param>
            <param name="key">The header key.</param>
            <param name="value">The value to assign to the header.</param>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.SkippedFile">
            <summary>
            Contains information about a file that was skipped during scanning along with a text describing
            the reason why the file was skipped
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.SkippedFile.FilePath">
            <summary>
            The full path to the file that was skipped
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.SkippedFile.SkipReason">
            <summary>
            Description of the reason why this file was skipped
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.HostInformation">
            <summary>
            Provides information about the process hosting this endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.HostInformation.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="hostId">The id of the host</param>
            <param name="displayName">The display name of the host</param>
        </member>
        <member name="M:NServiceBus.Hosting.HostInformation.#ctor(System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new instance
            </summary>
            <param name="hostId">The id of the host</param>
            <param name="displayName">The display name of the host</param>
            <param name="properties">A set of properties for the host. This might vary from host to host</param>
        </member>
        <member name="P:NServiceBus.Hosting.HostInformation.HostId">
            <summary>
            The unique identifier for this host
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.HostInformation.DisplayName">
            <summary>
            The display name of this host
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.HostInformation.Properties">
            <summary>
            A set of properties for the host. This might vary from host to host
            </summary>
        </member>
        <member name="T:NServiceBus.IAuthorizeSubscriptions">
            <summary>
            Implementer will be called by the infrastructure in order to authorize
            subscribe and unsubscribe requests from other endpoints.
            
            Infrastructure automatically registers one implementing type in the container as a singleton.
            </summary>
        </member>
        <member name="M:NServiceBus.IAuthorizeSubscriptions.AuthorizeSubscribe(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Return true if the client endpoint is to be allowed to subscribe to the given message type.
            Implementors can access the impersonated user via <see cref="M:System.Security.Principal.WindowsIdentity.GetCurrent"/>
            </summary>
        </member>
        <member name="M:NServiceBus.IAuthorizeSubscriptions.AuthorizeUnsubscribe(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Return true if the client endpoint is to be allowed to unsubscribe to the given message type.
            </summary>
        </member>
        <member name="T:NServiceBus.IBus">
            <summary>
            Defines a bus to be used with NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.IBus.Subscribe(System.Type)">
            <summary>
            Subscribes to receive published messages of the specified type.
            This method is only necessary if you turned off auto-subscribe.
            </summary>
            <param name="messageType">The type of message to subscribe to.</param>
        </member>
        <member name="M:NServiceBus.IBus.Subscribe``1">
            <summary>
            Subscribes to receive published messages of type T.
            This method is only necessary if you turned off auto-subscribe.
            </summary>
            <typeparam name="T">The type of message to subscribe to.</typeparam>
        </member>
        <member name="M:NServiceBus.IBus.Unsubscribe(System.Type)">
            <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
            <param name="messageType">The type of message to subscribe to.</param>
        </member>
        <member name="M:NServiceBus.IBus.Unsubscribe``1">
            <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
            <typeparam name="T">The type of message to unsubscribe from.</typeparam>
        </member>
        <member name="M:NServiceBus.IBus.SendLocal(System.Object)">
            <summary>
            Sends the message back to the current bus.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IBus.SendLocal``1(System.Action{``0})">
            <summary>
            Instantiates a message of type T and sends it back to the current bus.
            </summary>
            <typeparam name="T">The type of message, usually an interface.</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message</param>
        </member>
        <member name="M:NServiceBus.IBus.Defer(System.TimeSpan,System.Object)">
            <summary>
            Defers the processing of the message for the given delay. This feature is using the timeout manager so make sure that you enable timeouts
            </summary>
        </member>
        <member name="M:NServiceBus.IBus.Defer(System.DateTime,System.Object)">
            <summary>
            Defers the processing of the message until the specified time. This feature is using the timeout manager so make sure that you enable timeouts
            </summary>
        </member>
        <member name="M:NServiceBus.IBus.Reply(System.Object)">
            <summary>
            Sends the message to the endpoint which sent the message currently being handled on this thread.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:NServiceBus.IBus.Reply``1(System.Action{``0})">
            <summary>
            Instantiates a message of type T and performs a regular <see cref="M:NServiceBus.IBus.Reply(System.Object)"/>.
            </summary>
            <typeparam name="T">The type of message, usually an interface</typeparam>
            <param name="messageConstructor">An action which initializes properties of the message</param>
        </member>
        <member name="M:NServiceBus.IBus.Return``1(``0)">
            <summary>
            Returns a completion message with the specified error code to the sender
            of the message being handled. The type T can only be an enum or an integer.
            </summary>
        </member>
        <member name="M:NServiceBus.IBus.HandleCurrentMessageLater">
            <summary>
            Moves the message being handled to the back of the list of available 
            messages so it can be handled later.
            </summary>
        </member>
        <member name="M:NServiceBus.IBus.ForwardCurrentMessageTo(System.String)">
            <summary>
            Forwards the current message being handled to the destination maintaining
            all of its transport-level properties and headers.
            </summary>
        </member>
        <member name="M:NServiceBus.IBus.DoNotContinueDispatchingCurrentMessageToHandlers">
            <summary>
            Tells the bus to stop dispatching the current message to additional
            handlers.
            </summary>
        </member>
        <member name="P:NServiceBus.IBus.CurrentMessageContext">
            <summary>
            Gets the message context containing the Id, return address, and headers
            of the message currently being handled on this thread.
            </summary>
        </member>
        <member name="P:NServiceBus.IBus.InMemory">
            <summary>
            Support for in-memory operations.
            </summary>
        </member>
        <member name="T:NServiceBus.ICallback">
            <summary>
            Objects of this interface are returned from calling IBus.Send.
            The interface allows the caller to register for a callback when a response
            is received to their original call to <see cref="M:NServiceBus.ISendOnlyBus.Send(System.Object)"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.ICallback.Register">
            <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            The return code is returned as an int
            </summary>
        </member>
        <member name="M:NServiceBus.ICallback.Register``1">
            <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            The return code is cast to the given enumerated type - T.
            </summary>
            <typeparam name="T">An enumeration type or an integer.</typeparam>
        </member>
        <member name="M:NServiceBus.ICallback.Register``1(System.Func{NServiceBus.CompletionResult,``0})">
            <summary>
            Registers a function to be invoked when a response arrives to the message sent.
            Returns a Task that can be used with async/await operations.
            </summary>
            <param name="completion">A function to call upon completion that returns a value of type T.</param>
            <typeparam name="T">The type of the value to be returned from the function.</typeparam>
            <returns>A Task that can be used with async/await operations.</returns>
        </member>
        <member name="M:NServiceBus.ICallback.Register(System.Action{NServiceBus.CompletionResult})">
            <summary>
            Registers an action to be invoked when a response arrives to the message sent.
            Returns a Task that can be used with async/await operations.
            </summary>
            <param name="completion">An action to call upon completion that does not return a value.</param>
            <returns>A Task that can be used with async/await operations.</returns>
        </member>
        <member name="M:NServiceBus.ICallback.Register(System.AsyncCallback,System.Object)">
            <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            </summary>
            <param name="callback">The callback to invoke.</param>
            <param name="state">State that will be passed to the callback method.</param>
            <returns>An IAsyncResult useful for integration with ASP.NET async tasks.</returns>
        </member>
        <member name="M:NServiceBus.ICallback.Register``1(System.Action{``0})">
            <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            The return code is cast to the given enumerated type - T.
            </summary>
            <typeparam name="T">An enumeration type or an integer.</typeparam>
        </member>
        <member name="M:NServiceBus.ICallback.Register``1(System.Action{``0},System.Object)">
            <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            The return code is cast to the given enumerated type - T.
            Pass either a System.Web.UI.Page or a System.Web.Mvc.AsyncController as the synchronizer.
            </summary>
        </member>
        <member name="T:NServiceBus.ICommand">
            <summary>
            Marker interface to indicate that a class is a command message
            </summary>
        </member>
        <member name="T:NServiceBus.IMessage">
            <summary>
            Marker interface to indicate that a class is a message suitable
            for transmission and handling by an NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.CombGuid.Generate">
            <summary>
            Generate a new <see cref="T:System.Guid"/> using the comb algorithm.
            </summary>
        </member>
        <member name="T:NServiceBus.IEvent">
            <summary>
            Marker interface to indicate that a class is a event message
            </summary>
        </member>
        <member name="T:NServiceBus.IMessageContext">
            <summary>
            Contains out-of-band information on the logical message.
            </summary>
        </member>
        <member name="P:NServiceBus.IMessageContext.Id">
            <summary>
            Returns the Id of the message.
            </summary>
        </member>
        <member name="P:NServiceBus.IMessageContext.ReplyToAddress">
            <summary>
            The address of the endpoint that sent the current message being handled.
            </summary>
        </member>
        <member name="P:NServiceBus.IMessageContext.Headers">
            <summary>
            Gets the list of key/value pairs found in the header of the message.
            </summary>
        </member>
        <member name="T:NServiceBus.IMessageCreator">
            <summary>
            The abstraction for creating interface-based messages.
            </summary>
        </member>
        <member name="M:NServiceBus.IMessageCreator.CreateInstance``1">
            <summary>
            Creates an instance of the message type T.
            </summary>
            <typeparam name="T">The type of message interface to instantiate.</typeparam>
            <returns>A message object that implements the interface T.</returns>
        </member>
        <member name="M:NServiceBus.IMessageCreator.CreateInstance``1(System.Action{``0})">
            <summary>
            Creates an instance of the message type T and fills it with data.
            </summary>
            <typeparam name="T">The type of message interface to instantiate.</typeparam>
            <param name="action">An action to set various properties of the instantiated object.</param>
            <returns>A message object that implements the interface T.</returns>
        </member>
        <member name="M:NServiceBus.IMessageCreator.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the given message type.
            </summary>
            <param name="messageType">The type of message to instantiate.</param>
            <returns>A message object that implements the given interface.</returns>
        </member>
        <member name="T:NServiceBus.IHandleMessages`1">
            <summary>
            Defines a message handler.
            </summary>
            <typeparam name="T">The type of message to be handled.</typeparam>
        </member>
        <member name="M:NServiceBus.IHandleMessages`1.Handle(`0)">
            <summary>
            Handles a message.
            </summary>
            <param name="message">The message to handle.</param>
            <remarks>
            This method will be called when a message arrives on the bus and should contain
            the custom logic to execute when the message is received.</remarks>
        </member>
        <member name="T:NServiceBus.Persistence.Legacy.MsmqPersistence">
            <summary>
            Used to enable Msmq persistence.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.PersistenceDefinition">
            <summary>
            Base class for persistence definitions
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.Supports(NServiceBus.Persistence.Storage,System.Action{NServiceBus.Settings.SettingsHolder})">
            <summary>
            Used be the storage definitions to declare what they support
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.Defaults(System.Action{NServiceBus.Settings.SettingsHolder})">
            <summary>
            Used be the storage definitions to declare what they support
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.PersistenceDefinition.HasSupportFor(NServiceBus.Persistence.Storage)">
            <summary>
            True if supplied storage is supported
            </summary>
        </member>
        <member name="T:NServiceBus.Features.MsmqSubscriptionPersistence">
            <summary>
            Provides subscription storage using a msmq queue as the backing store
            </summary>
        </member>
        <member name="M:NServiceBus.Features.MsmqSubscriptionPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated
            </summary>
            <param name="context">The feature context</param>
        </member>
        <member name="T:NServiceBus.PersistenceExtentions`1">
            <summary>
            This class provides implementers of persisters with an extension mechanism for custom settings via extention methods.
            </summary>
            <typeparam name="T">The persister definition eg <see cref="N:NServiceBus.InMemory"/>, <see cref="T:NServiceBus.MsmqTransport"/>, etc</typeparam>
        </member>
        <member name="T:NServiceBus.PersistenceExtentions">
            <summary>
            This class provides implementers of persisters with an extension mechanism for custom settings via extention methods.
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceExtentions.#ctor(System.Type,NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceExtentions.For(NServiceBus.Persistence.Storage[])">
            <summary>
            Defines the list of specific storage needs this persistence should provide
            </summary>
            <param name="specificStorages">The list of storage needs</param>
        </member>
        <member name="M:NServiceBus.PersistenceExtentions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceExtentions`1.For(NServiceBus.Persistence.Storage[])">
            <summary>
            Defines the list of specific storage needs this persistence should provide
            </summary>
            <param name="specificStorages">The list of storage needs</param>
        </member>
        <member name="T:NServiceBus.Persistence.Storage">
            <summary>
            The storage needs of NServiceBus
            </summary>
        </member>
        <member name="F:NServiceBus.Persistence.Storage.Timeouts">
            <summary>
            Storage for timeouts
            </summary>
        </member>
        <member name="F:NServiceBus.Persistence.Storage.Subscriptions">
            <summary>
            Storage for subscriptions
            </summary>
        </member>
        <member name="F:NServiceBus.Persistence.Storage.Sagas">
            <summary>
            Storage for sagas
            </summary>
        </member>
        <member name="F:NServiceBus.Persistence.Storage.GatewayDeduplication">
            <summary>
            Storage for gateway deduplication
            </summary>
        </member>
        <member name="F:NServiceBus.Persistence.Storage.Outbox">
            <summary>
            Storage for the outbox
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.CorrelationProperty">
            <summary>
            Details about a saga data property used to correlate messages hitting the saga
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.CorrelationProperty.Name">
            <summary>
            The name of the saga data property
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaFinderDefinition">
            <summary>
            Defines a message finder
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaFinderDefinition.Properties">
            <summary>
            Custom properties
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaFinderDefinition.Type">
            <summary>
            The type of the finder
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaFinderDefinition.MessageType">
            <summary>
            The type of message this finder is associated with
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaMessage">
            <summary>
            Representation of a message that is related to a saga
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaMessage.IsAllowedToStartSaga">
            <summary>
            True if the message can start the saga
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaMessage.MessageType">
            <summary>
            The type of the message
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaMetadata">
            <summary>
            Contains metadata for known sagas
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaMetadata.CorrelationProperties">
            <summary>
            Properties this saga is correlated on
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaMetadata.Name">
            <summary>
            The name of the saga
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaMetadata.EntityName">
            <summary>
            The name of the saga data entity
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.IsMessageAllowedToStartTheSaga(System.String)">
            <summary>
            True if the specified message type is allowed to start the saga
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="F:NServiceBus.Sagas.SagaMetadata.SagaEntityType">
            <summary>
            The type of the related saga entity
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaMetadata.SagaType">
            <summary>
            The type for this saga
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.SagaMetadata.TryGetFinder(System.String,NServiceBus.Sagas.SagaFinderDefinition@)">
            <summary>
            Gets the configured finder for this message
            </summary>
            <param name="messageType"></param>
            <param name="finderDefinition">The finder if present</param>
            <returns>True if finder exists</returns>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.AssociatedMessages">
            <summary>
            Returns the list of messages that is associated with this saga
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.SagaMetadata.Finders">
            <summary>
            Gets the list of finders for this saga
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IConfigureHowToFindSagaWithMessage">
            <summary>
            Implementation provided by the infrastructure - don't implement this
            or register implementations of it in the container unless you intend
            to substantially change the way sagas work in nServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.IConfigureHowToFindSagaWithMessage.ConfigureMapping``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
            <summary>
            Specify that when the infrastructure is handling a message 
            of the given type, which message property should be matched to 
            which saga entity property in the persistent saga store.
            </summary>
        </member>
        <member name="T:NServiceBus.Schedule">
            <summary>
            Scheduling capability to schedule a task (as an <see cref="T:System.Action"/>) to be executed repeatedly in a given interval.
            </summary>
            <remarks>This is a in-memory list of <see cref="T:System.Action"/>s.</remarks>
        </member>
        <member name="M:NServiceBus.Schedule.#ctor(NServiceBus.ObjectBuilder.IBuilder)">
            <summary>
            Builds a new instance of <see cref="T:NServiceBus.Schedule"/>.
            </summary>
            <param name="builder">The <see cref="T:NServiceBus.ObjectBuilder.IBuilder"/>.</param>
        </member>
        <member name="M:NServiceBus.Schedule.Every(System.TimeSpan,System.Action)">
            <summary>
            Schedules a task to be executed repeatedly in a given interval.
            </summary>
            <param name="timeSpan">The interval to repeatedly execute the <paramref name="task"/>.</param>
            <param name="task">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:NServiceBus.Schedule.Every(System.TimeSpan,System.String,System.Action)">
            <summary>
            Schedules a task to be executed repeatedly in a given interval.
            </summary>
            <param name="timeSpan">The interval to repeatedly execute the <paramref name="task"/>.</param>
            <param name="task">The <see cref="T:System.Action"/> to execute.</param>
            <param name="name">The name to use used for logging inside the new <see cref="T:System.Threading.Thread"/>.</param>
        </member>
        <member name="T:NServiceBus.Features.Scheduler">
            <summary>
            NServiceBus scheduling capability you can schedule a task or an action/lambda, to be executed repeatedly in a given interval.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Scheduler.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated
            </summary>
            <param name="context">The feature context</param>
        </member>
        <member name="T:NServiceBus.Serialization.SerializationDefinition">
            <summary>
            Implemented by serializers to provide their capabilities
            </summary>
        </member>
        <member name="M:NServiceBus.Serialization.SerializationDefinition.ProvidedByFeature">
            <summary>
            The feature to enable when this serializer is selected
            </summary>
        </member>
        <member name="T:NServiceBus.SerializationConfigExtensions">
            <summary>
            Provides configuration options for serialization
            </summary>
        </member>
        <member name="M:NServiceBus.SerializationConfigExtensions.UseSerialization``1(NServiceBus.BusConfiguration)">
            <summary>
            Configures the given serializer to be used
            </summary>
            <typeparam name="T">The serializer definition eg <see cref="T:NServiceBus.JsonSerializer"/>, <see cref="T:NServiceBus.XmlSerializer"/>, etc</typeparam>
            <param name="config"></param>
        </member>
        <member name="M:NServiceBus.SerializationConfigExtensions.UseSerialization(NServiceBus.BusConfiguration,System.Type)">
            <summary>
            Configures the given serializer to be used
            </summary>
            <param name="config"></param>
            <param name="serializerType">The custom serializer type to use for serialization that implements <see cref="T:NServiceBus.Serialization.IMessageSerializer"/> or a derived type from <see cref="T:NServiceBus.Serialization.SerializationDefinition"/>.</param>
        </member>
        <member name="T:NServiceBus.Serialization.SerializationExtentions`1">
            <summary>
            This class provides implementers of serializers with an extension mechanism for custom settings via extention methods.
            </summary>
            <typeparam name="T">The serializer definition eg <see cref="T:NServiceBus.JsonSerializer"/>, <see cref="T:NServiceBus.XmlSerializer"/>, etc</typeparam>
        </member>
        <member name="M:NServiceBus.Serialization.SerializationExtentions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="T:NServiceBus.BinarySerializer">
            <summary>
            Defines the capabilities of the Binary serializer
            </summary>
        </member>
        <member name="M:NServiceBus.BinarySerializer.ProvidedByFeature">
            <summary>
            <see cref="M:NServiceBus.Serialization.SerializationDefinition.ProvidedByFeature"/>
            </summary>
        </member>
        <member name="T:NServiceBus.BsonSerializer">
            <summary>
            Defines the capabilities of the BSON serializer
            </summary>
        </member>
        <member name="M:NServiceBus.BsonSerializer.ProvidedByFeature">
            <summary>
            <see cref="M:NServiceBus.Serialization.SerializationDefinition.ProvidedByFeature"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.SerializationFeatureHelper">
            <summary>
            Base class for all serialization <see cref="T:NServiceBus.Features.Feature"/>s.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SerializationFeatureHelper.ShouldSerializationFeatureBeEnabled(NServiceBus.Features.Feature,NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Allows serialization features to verify their <see cref="M:NServiceBus.Features.Feature.Prerequisite(System.Func{NServiceBus.Features.FeatureConfigurationContext,System.Boolean},System.String)"/>s
            </summary>
        </member>
        <member name="T:NServiceBus.JsonSerializer">
            <summary>
            Defines the capabilities of the JSON serializer
            </summary>
        </member>
        <member name="M:NServiceBus.JsonSerializer.ProvidedByFeature">
            <summary>
            <see cref="M:NServiceBus.Serialization.SerializationDefinition.ProvidedByFeature"/>
            </summary>
        </member>
        <member name="T:NServiceBus.XmlSerializer">
            <summary>
            Defines the capabilities of the XML serializer
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSerializer.ProvidedByFeature">
            <summary>
            The feature to enable when this serializer is selected
            </summary>
        </member>
        <member name="T:NServiceBus.XmlSerializationExtentions">
            <summary>
            Custom extentions for the <see cref="T:NServiceBus.XmlSerializer"/> serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSerializationExtentions.DontWrapRawXml(NServiceBus.Serialization.SerializationExtentions{NServiceBus.XmlSerializer})">
            <summary>
            Tells the serializer to not wrap properties which have either XDocument or XElement with a "PropertyName" element.
            By default the xml serializer serializes the following message
            </summary>
            <code>
            interface MyMessage { XDocument Property { get; set; } }
            </code>
            into the following structure
            <code>
            <MyMessage>
                <Property>
                  ... Content of the XDocument
                </Property>
            </MyMessage>
            </code>
            This flag allows to omit the property tag wrapping. Which results to
            <code>
            <MyMessage>
                  ... Content of the XDocument
            </MyMessage>
            </code>
            When this feature is enable the root element of the XDocument must match the name of the property. The following would not work and lead to deserialization error:
            <code>
            <MyMessage>
                  <Root>
                    ...
                  </Root>
            </MyMessage>
            </code>
        </member>
        <member name="M:NServiceBus.XmlSerializationExtentions.Namespace(NServiceBus.Serialization.SerializationExtentions{NServiceBus.XmlSerializer},System.String)">
            <summary>
            Configures the serializer to use a custom namespace. (http://tempuri.net) is the default.
            <para>If the provided namespace ends with trailing forward slashes, those will be removed on the fly.</para>
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSerializationExtentions.SanitizeInput(NServiceBus.Serialization.SerializationExtentions{NServiceBus.XmlSerializer})">
            <summary>
            Tells the serializer to sanitize the input data from illegal characters
            </summary>
        </member>
        <member name="T:NServiceBus.DurableMessagesConfig">
            <summary>
                Configuration class for durable messaging.
            </summary>
        </member>
        <member name="M:NServiceBus.DurableMessagesConfig.EnableDurableMessages(NServiceBus.BusConfiguration)">
            <summary>
            Configures messages to be guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
        </member>
        <member name="M:NServiceBus.DurableMessagesConfig.DisableDurableMessages(NServiceBus.BusConfiguration)">
            <summary>
            Configures messages that are not guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
        </member>
        <member name="M:NServiceBus.DurableMessagesConfig.DurableMessagesEnabled(NServiceBus.Configure)">
            <summary>
            Returns whether durable messages are on or off.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigurationTimeoutExtensions">
            <summary>
            Extension methods declarations.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurationTimeoutExtensions.TimeToWaitBeforeTriggeringCriticalErrorOnTimeoutOutages(NServiceBus.BusConfiguration,System.TimeSpan)">
            <summary>
            A critical error is raised when timeout retrieval fails.
            By default we wait for 2 seconds for the storage to come back.
            This method allows to change the default and extend the wait time.
            </summary>
            <param name="config"></param>
            <param name="timeToWait">Time to wait before raising a critical error.</param>
        </member>
        <member name="T:NServiceBus.ConfigurePurging">
            <summary>
            Configures purging
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurePurging.PurgeOnStartup(NServiceBus.Configure,System.Boolean)">
            <summary>
            Requests that the incoming queue be purged of all messages when the bus is started.
            All messages in this queue will be deleted if this is true.
            Setting this to true may make sense for certain smart-client applications, 
            but rarely for server applications.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurePurging.PurgeOnStartup(NServiceBus.BusConfiguration,System.Boolean)">
            <summary>
            Requests that the incoming queue be purged of all messages when the bus is started.
            All messages in this queue will be deleted if this is true.
            Setting this to true may make sense for certain smart-client applications, 
            but rarely for server applications.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurePurging.PurgeOnStartup(NServiceBus.Configure)">
            <summary>
            Retrieves whether to purge the queues at startup or not.
            </summary>
        </member>
        <member name="P:NServiceBus.ConfigurePurging.PurgeRequested">
            <summary>
            True if the users wants the input queue to be purged when we starts up
            </summary>
        </member>
        <member name="T:NServiceBus.Features.ForwardReceivedMessages">
            <summary>
            Provides message forwarding capabilities
            </summary>
        </member>
        <member name="M:NServiceBus.Features.ForwardReceivedMessages.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated
            </summary>
            <param name="context">The feature context</param>
        </member>
        <member name="T:NServiceBus.LoadMessageHandlersExtentions">
            <summary>
            Provides configuration options to tune handler ordering
            </summary>
        </member>
        <member name="M:NServiceBus.LoadMessageHandlersExtentions.LoadMessageHandlers``1(NServiceBus.BusConfiguration)">
            <summary>
                Loads all message handler assemblies in the runtime directory
                and specifies that handlers in the given assembly should run
                before all others.
                Use First{T} to indicate the type to load from.
            </summary>
        </member>
        <member name="M:NServiceBus.LoadMessageHandlersExtentions.LoadMessageHandlers``1(NServiceBus.BusConfiguration,NServiceBus.First{``0})">
            <summary>
                Loads all message handler assemblies in the runtime directory
                and specifies that the handlers in the given 'order' are to
                run before all others and in the order specified.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.SLAMonitoring">
            <summary>
            Used to configure SLAMonitoring.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SLAMonitoring.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.IMessageDispatcherFactory">
            <summary>
            Returns the action to dispatch the given message to the handler
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.GetDispatcher(System.Type,NServiceBus.ObjectBuilder.IBuilder,System.Object)">
            <summary>
            Returns the action that will dispatch this message
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.CanDispatch(System.Type)">
            <summary>
            Returns true if the factory is able to dispatch this type
            </summary>
        </member>
        <member name="T:NServiceBus.MessageDeserializationException">
            <summary>
            Wraps the <see cref="T:System.Exception"/> that occurs when the contents of a <see cref="T:NServiceBus.TransportMessage"/> is deserialized to a list of <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/>s.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageDeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.MessageDeserializationException"/>.
            </summary>
            <param name="innerException"> The exception that is the cause of the current exception.</param>
            <param name="transportMessageId">The id of the <see cref="T:NServiceBus.TransportMessage"/> that failed to deserialize.</param>
        </member>
        <member name="M:NServiceBus.MessageDeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            <see cref="M:System.Runtime.Serialization.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.TransportExtensions`1">
            <summary>
            This class provides implementers of persisters with an extension mechanism for custom settings via extension methods.
            </summary>
            <typeparam name="T">The persister definition eg <see cref="N:NServiceBus.InMemory"/>, <see cref="T:NServiceBus.MsmqTransport"/>, etc</typeparam>
        </member>
        <member name="T:NServiceBus.TransportExtensions">
            <summary>
            This class provides implementers of transports with an extension mechanism for custom settings via extention methods.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.ConnectionString(System.String)">
            <summary>
            Configures the transport to use the given string as the connection string
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.ConnectionStringName(System.String)">
            <summary>
            Configures the transport to use the connection string with the given name
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions.ConnectionString(System.Func{System.String})">
            <summary>
            Configures the transport to use the given func as the connection string
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.#ctor(NServiceBus.Settings.SettingsHolder)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.ConnectionString(System.String)">
            <summary>
            Configures the transport to use the given string as the connection string
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.ConnectionStringName(System.String)">
            <summary>
            Configures the transport to use the connection string with the given name
            </summary>
        </member>
        <member name="M:NServiceBus.TransportExtensions`1.ConnectionString(System.Func{System.String})">
            <summary>
            Configures the transport to use the given func as the connection string
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureTransportConnectionString">
            <summary>
            Allows you to read which transport connectionstring has been set
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTransportConnectionString.TransportConnectionString(NServiceBus.Configure)">
            <summary>
            Gets the transport connectionstring.
            </summary>
        </member>
        <member name="T:NServiceBus.UseTransportExtensions">
            <summary>
            Extension methods to configure transport.
            </summary>
        </member>
        <member name="M:NServiceBus.UseTransportExtensions.UseTransport``1(NServiceBus.BusConfiguration)">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
        </member>
        <member name="M:NServiceBus.UseTransportExtensions.UseTransport(NServiceBus.BusConfiguration,System.Type)">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
        </member>
        <member name="T:NServiceBus.IStartableBus">
            <summary>
            The interface used for starting and stopping an IBus.
            </summary>
        </member>
        <member name="M:NServiceBus.IStartableBus.Start">
            <summary>
            Starts the bus and returns a reference to it.
            </summary>
            <returns>A reference to the bus.</returns>
        </member>
        <member name="T:NServiceBus.IWantToRunWhenBusStartsAndStops">
            <summary>
            Implementers will be invoked when the endpoint starts up.
            Dependency injection is provided for these types.
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunWhenBusStartsAndStops.Start">
            <summary>
            Method called at startup.
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunWhenBusStartsAndStops.Stop">
            <summary>
            Method called on shutdown.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.ILog">
            <summary>
            Provides logging methods and utility functions
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Debug(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Debug(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Debug"/> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Debug"/> level using the specified <paramref name="format"/> provider and format <paramref name="args"/>.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Info(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Info(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Info"/> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Info"/> level using the specified <paramref name="format"/> provider and format <paramref name="args"/>.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Warn(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Warn(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Warn"/> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Warn"/> level using the specified <paramref name="format"/> provider and format <paramref name="args"/>.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Error(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Error(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Error"/> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Error"/> level using the specified <paramref name="format"/> provider and format <paramref name="args"/>.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Fatal(System.String)">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.Fatal(System.String,System.Exception)">
            <summary>
            Writes the message and exception at the <see cref="F:NServiceBus.Logging.LogLevel.Fatal"/> level.
            </summary>
            <param name="message">A string to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NServiceBus.Logging.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            Writes the message at the <see cref="F:NServiceBus.Logging.LogLevel.Fatal"/> level using the specified <paramref name="format"/> provider and format <paramref name="args"/>.
            </summary>
            <param name="format">A string containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Debug"/> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Info"/> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Warn"/> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Error"/> level.
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.ILog.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <see cref="F:NServiceBus.Logging.LogLevel.Fatal"/> level.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.ILoggerFactory">
            <summary>
            Used by <see cref="T:NServiceBus.Logging.LogManager"/> to facilitate redirecting logging to a different library.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.ILoggerFactory.GetLogger(System.Type)">
            <summary>
            Gets a <see cref="T:NServiceBus.Logging.ILog"/> for a specific <paramref name="type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the <see cref="T:NServiceBus.Logging.ILog"/> for.</param>
            <returns>An instance of a <see cref="T:NServiceBus.Logging.ILog"/> specifically for <paramref name="type"/>.</returns>
        </member>
        <member name="M:NServiceBus.Logging.ILoggerFactory.GetLogger(System.String)">
            <summary>
            Gets a <see cref="T:NServiceBus.Logging.ILog"/> for a specific <paramref name="name"/>.
            </summary>
            <param name="name">The name of the usage to get the <see cref="T:NServiceBus.Logging.ILog"/> for.</param>
            <returns>An instance of a <see cref="T:NServiceBus.Logging.ILog"/> specifically for <paramref name="name"/>.</returns>
        </member>
        <member name="T:NServiceBus.Logging.LogLevel">
            <summary>
            The allowed log levels. <seealso cref="T:NServiceBus.Logging.LogManager"/>.
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Debug">
            <summary>
            Debug level messages
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Info">
            <summary>
            Information level messages
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Warn">
            <summary>
            Warning level messages
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Error">
            <summary>
            Error level messages
            </summary>
        </member>
        <member name="F:NServiceBus.Logging.LogLevel.Fatal">
            <summary>
            Fatal level messages
            </summary>
        </member>
        <member name="T:NServiceBus.Conventions">
            <summary>
                Message convention definitions.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.GetTimeToBeReceived(System.Type)">
            <summary>
                Returns the time to be received for a give <paramref name="messageType" />.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsMessageType(System.Type)">
            <summary>
                Returns true if the given type is a message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsInSystemConventionList(System.Type)">
            <summary>
                Returns true is message is a system message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.AddSystemMessagesConventions(System.Func{System.Type,System.Boolean})">
            <summary>
                Add system message convention
            </summary>
            <param name="definesMessageType">Function to define system message convention</param>
        </member>
        <member name="M:NServiceBus.Conventions.IsCommandType(System.Type)">
            <summary>
                Returns true if the given type is a command type.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsExpressMessageType(System.Type)">
            <summary>
                Returns true if the given type should not be written to disk when sent.
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsEncryptedProperty(System.Reflection.PropertyInfo)">
            <summary>
                Returns true if the given property should be encrypted
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsDataBusProperty(System.Reflection.PropertyInfo)">
            <summary>
                Returns true if the given property should be send via the DataBus
            </summary>
        </member>
        <member name="M:NServiceBus.Conventions.IsEventType(System.Type)">
            <summary>
                Returns true if the given type is a event type.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageIntentEnum">
            <summary>
             Enumeration defining different kinds of message intent like Send and Publish.
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Send">
            <summary>
             Regular point-to-point send
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Publish">
            <summary>
             Publish, not a regular point-to-point send
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Subscribe">
            <summary>
            Subscribe
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Unsubscribe">
            <summary>
            Unsubscribe
            </summary>
        </member>
        <member name="F:NServiceBus.MessageIntentEnum.Reply">
            <summary>
            Indicates that this message is a reply
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMessageMutator">
            <summary>
            Use this interface to change logical messages before any other code sees them.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateOutgoingMessages">
            <summary>
            Mutates outgoing messages
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateOutgoingMessages.MutateOutgoing(System.Object)">
            <summary>
            Mutates the given message just before it's serialized
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateIncomingMessages">
            <summary>
            Mutates incoming messages
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateIncomingMessages.MutateIncoming(System.Object)">
            <summary>
            Mutates the given message right after it has been deserialized
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateIncomingTransportMessages">
            <summary>
            Mutates transport messages when they are received.
            Implementors are invoked before the logical messages have been deserialized.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateIncomingTransportMessages.MutateIncoming(NServiceBus.TransportMessage)">
            <summary>
            Modifies various properties of the transport message.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages">
            <summary>
            Mutates transport messages before they are sent.
            Implementors are invoked after the logical messages have been serialized.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages.MutateOutgoing(NServiceBus.Unicast.Messages.LogicalMessage,NServiceBus.TransportMessage)">
            <summary>
            Modifies various properties of the transport message.
            </summary>
            <remarks>Mutations should be applied to the <paramref name="transportMessage"/>.</remarks>
            <param name="logicalMessage">The outgoing <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/> that wraps the actual business message. See <see cref="P:NServiceBus.Unicast.Messages.LogicalMessage.Instance"/> to get the actual business message.</param>
            <param name="transportMessage">The physical message about to be sent to the queue.</param>
        </member>
        <member name="T:NServiceBus.Outbox.IOutboxStorage">
            <summary>
            Implemented by the persisters to provide outbox storage capabilities
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.IOutboxStorage.TryGet(System.String,NServiceBus.Outbox.OutboxMessage@)">
            <summary>
            Tries to find the given message in the outbox
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.IOutboxStorage.Store(System.String,System.Collections.Generic.IEnumerable{NServiceBus.Outbox.TransportOperation})">
            <summary>
            Stores 
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.IOutboxStorage.SetAsDispatched(System.String)">
            <summary>
            Tells the storage that the message has been dispatched and its now safe to clean up the transport operations
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Outbox">
            <summary>
            Configure the Outbox.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Outbox.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.OutboxConfigExtensions">
            <summary>
            Config methods for the outbox
            </summary>
        </member>
        <member name="M:NServiceBus.OutboxConfigExtensions.EnableOutbox(NServiceBus.BusConfiguration)">
            <summary>
            Enables the outbox feature
            </summary>
        </member>
        <member name="T:NServiceBus.Outbox.OutboxMessage">
            <summary>
                The Outbox message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.OutboxMessage.#ctor(System.String)">
            <summary>
                Creates an instance of an <see cref="T:NServiceBus.Outbox.OutboxMessage"/>.
            </summary>
            <param name="messageId">The message identifier of the incoming message.</param>
        </member>
        <member name="P:NServiceBus.Outbox.OutboxMessage.MessageId">
            <summary>
                Gets the message identifier of the incoming message.
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.OutboxMessage.TransportOperations">
            <summary>
                The list of operations performed during the processing of the incoming message.
            </summary>
        </member>
        <member name="T:NServiceBus.Outbox.OutboxSettings">
            <summary>
            Custom settings related to the outbox feature
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.OutboxSettings.TimeToKeepDeduplicationData(System.TimeSpan)">
            <summary>
            Specifies how long the outbox should keep message data in storage to be able to deduplicate.
            </summary>
            <param name="time">The new duration to be used</param>
        </member>
        <member name="T:NServiceBus.Outbox.TransportOperation">
            <summary>
                Outgoing message operation.
            </summary>
        </member>
        <member name="M:NServiceBus.Outbox.TransportOperation.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Creates a new instance of a <see cref="T:NServiceBus.Outbox.TransportOperation"/>.
            </summary>
            <param name="messageId">The identifier of the outgoing message.</param>
            <param name="options">The sending options.</param>
            <param name="body">The message body.</param>
            <param name="headers">The message headers.</param>
            .
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.MessageId">
            <summary>
                Gets the identifier of the outgoing message.
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.Options">
            <summary>
                Sending options.
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.Body">
            <summary>
                Gets a byte array to the body content of the outgoing message
            </summary>
        </member>
        <member name="P:NServiceBus.Outbox.TransportOperation.Headers">
            <summary>
                Gets outgoing message headers.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemoryGatewayPersistence">
            <summary>
            In-memory Gateway
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemoryGatewayPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.InMemoryPersistence">
            <summary>
            Used to enable InMemory persistence.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemoryOutboxPersistence">
            <summary>
            Used to configure in memory outbox persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemoryOutboxPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemorySagaPersistence">
            <summary>
            Used to configure in memory saga persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemorySagaPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemorySubscriptionPersistence">
            <summary>
            Used to configure in memory subscription persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemorySubscriptionPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.InMemoryTimeoutPersistence">
            <summary>
            Used to configure in memory timeout persistence.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.InMemoryTimeoutPersistence.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.PerformanceMonitorUsersInstaller">
            <summary>
            Add the identity to the 'Performance Monitor Users' local group 
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.INeedToInstallSomething">
            <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            Implementors should not implement this type directly but rather the generic version of it.
            </summary>
        </member>
        <member name="M:NServiceBus.Installation.INeedToInstallSomething.Install(System.String,NServiceBus.Configure)">
            <summary>
            Performs the installation providing permission for the given user.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
            <param name="config"><see cref="T:NServiceBus.Configure"/> instance.</param>
        </member>
        <member name="T:NServiceBus.PersistenceConfig">
            <summary>
            Enables users to select persistence by calling .UsePersistence()
            </summary>
        </member>
        <member name="M:NServiceBus.PersistenceConfig.UsePersistence``1(NServiceBus.BusConfiguration)">
            <summary>
            Configures the given persistence to be used
            </summary>
            <typeparam name="T">The persistence definition eg <see cref="T:NServiceBus.InMemoryPersistence"/>, NHibernate etc</typeparam>
            <param name="config">The configuration object since this is an extention method</param>
        </member>
        <member name="M:NServiceBus.PersistenceConfig.UsePersistence(NServiceBus.BusConfiguration,System.Type)">
            <summary>
             Configures the given persistence to be used
            </summary>
            <param name="config">The configuration object since this is an extention method</param>
            <param name="definitionType">The persistence definition eg <see cref="T:NServiceBus.InMemoryPersistence"/>, NHibernate etc</param>
        </member>
        <member name="T:NServiceBus.Pipeline.BehaviorContext">
            <summary>
            Base class for a pipeline behavior.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.#ctor(NServiceBus.Pipeline.BehaviorContext)">
            <summary>
            Create an instance of <see cref="T:NServiceBus.Pipeline.BehaviorContext"/>.
            </summary>
            <param name="parentContext">The parent context</param>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.Get``1">
            <summary>
            Retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <returns>The type instance.</returns>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.TryGet``1(``0@)">
            <summary>
            Tries to retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="result">The type instance.</param>
            <returns><code>true</code> if found, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.TryGet``1(System.String,``0@)">
            <summary>
            Tries to retrieves the specified type from the context using a custom key.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="key">The custom key.</param>
            <param name="result">The type instance.</param>
            <returns><code>true</code> if found, otherwise <code>false</code>.</returns>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.Get``1(System.String)">
            <summary>
            Retrieves the specified type from the context.
            </summary>
            <typeparam name="T">The type to retrieve.</typeparam>
            <param name="key">The custom key.</param>
            <returns>The type instance.</returns>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.Set``1(``0)">
            <summary>
            Stores the type instance in the context.
            </summary>
            <typeparam name="T">The type to store.</typeparam>
            <param name="t">The instance type to store.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.Set``1(System.String,``0)">
            <summary>
            Stores the type instance in the context using a custom key.
            </summary>
            <typeparam name="T">The type to store.</typeparam>
            <param name="key">The custom key.</param>
            <param name="t">The instance type to store.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.Remove``1">
            <summary>
            Removes the instance type from the context.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
        </member>
        <member name="M:NServiceBus.Pipeline.BehaviorContext.Remove(System.String)">
            <summary>
            Removes a entry from the context using the specifed custom key.
            </summary>
            <param name="key">The custom key.</param>
        </member>
        <member name="F:NServiceBus.Pipeline.BehaviorContext.parentContext">
            <summary>
            Access to the parent context
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.BehaviorContext.Builder">
            <summary>
            The current <see cref="T:NServiceBus.ObjectBuilder.IBuilder"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.PipelineSettings">
            <summary>
            Manages the pipeline configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.#ctor(NServiceBus.BusConfiguration)">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Pipeline.PipelineSettings"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Remove(System.String)">
            <summary>
            Removes the specified step from the pipeline.
            </summary>
            <param name="stepId">The identifier of the step to remove.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Remove(NServiceBus.Pipeline.WellKnownStep)">
            <summary>
            Removes the specified step from the pipeline.
            </summary>
            <param name="wellKnownStep">The identifier of the well known step to remove.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Replace(System.String,System.Type,System.String)">
            <summary>
            Replaces an existing step behavior with a new one.
            </summary>
            <param name="stepId">The identifier of the step to replace its implementation.</param>
            <param name="newBehavior">The new <see cref="T:NServiceBus.Pipeline.IBehavior`1"/> to use.</param>
            <param name="description">The description of the new behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Replace(NServiceBus.Pipeline.WellKnownStep,System.Type,System.String)">
            <summary>
            <see cref="M:NServiceBus.Pipeline.PipelineSettings.Replace(System.String,System.Type,System.String)"/>
            </summary>
            <param name="wellKnownStep">The identifier of the well known step to replace.</param>
            <param name="newBehavior">The new <see cref="T:NServiceBus.Pipeline.IBehavior`1"/> to use.</param>
            <param name="description">The description of the new behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register(System.String,System.Type,System.String)">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <param name="stepId">The identifier of the new step to add.</param>
            <param name="behavior">The <see cref="T:NServiceBus.Pipeline.IBehavior`1"/> to execute.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register(NServiceBus.Pipeline.WellKnownStep,System.Type,System.String)">
            <summary>
            <see cref="M:NServiceBus.Pipeline.PipelineSettings.Register(System.String,System.Type,System.String)"/>
            </summary>
            <param name="wellKnownStep">The identifier of the step to add.</param>
            <param name="behavior">The <see cref="T:NServiceBus.Pipeline.IBehavior`1"/> to execute.</param>
            <param name="description">The description of the behavior.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineSettings.Register``1">
            <summary>
            Register a new step into the pipeline.
            </summary>
            <typeparam name="T">The <see cref="T:NServiceBus.Pipeline.RegisterStep"/> to use to perform the registration.</typeparam>
        </member>
        <member name="T:NServiceBus.Pipeline.WellKnownStep">
            <summary>
            Well known steps.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.ProcessingStatistics">
            <summary>
            Statistics analysis
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.AuditProcessedMessage">
            <summary>
            Auditing
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.CreateChildContainer">
            <summary>
            Child Container creator.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.ExecuteUnitOfWork">
            <summary>
            Executes UoWs.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.MutateIncomingTransportMessage">
            <summary>
            Runs incoming mutation for <see cref="T:NServiceBus.TransportMessage"/>.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.DispatchMessageToTransport">
            <summary>
            Send messages to the wire.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.InvokeHandlers">
            <summary>
            Invokes IHandleMessages{T}.Handle(T)
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.DeserializeMessages">
            <summary>
            Deserializes all logical messages from the transport message.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.MutateIncomingMessages">
            <summary>
            Runs incoming mutation for each logical message.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.LoadHandlers">
            <summary>
            Loads all handlers to be executed.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.InvokeSaga">
            <summary>
            Invokes the saga code.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.ExecuteLogicalMessages">
            <summary>
            Loops through all <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/>.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.EnforceBestPractices">
            <summary>
            Ensures best practices are met.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.MutateOutgoingMessages">
            <summary>
            Runs outgoing mutation for each logical message.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.CreatePhysicalMessage">
            <summary>
            Creates the protocol messages to send out.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.SerializeMessage">
            <summary>
            Serializes messages.
            </summary>
        </member>
        <member name="F:NServiceBus.Pipeline.WellKnownStep.MutateOutgoingTransportMessage">
            <summary>
            Runs outgoing mutation for <see cref="T:NServiceBus.TransportMessage"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.ContainSagaData">
            <summary>
            Base class to make defining saga data easier 
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IContainSagaData">
            <summary>
            The saga data that will be persisted.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.IContainSagaData.Id">
            <summary>
            Gets/sets the Id of the process. Do NOT generate this value in your code.
            The value of the Id will be generated automatically to provide the
            best performance for saving in a database.
            </summary>
            <remarks>
            The reason Guid is used for process Id is that messages containing this Id need
            to be sent by the process even before it is persisted.
            </remarks>
        </member>
        <member name="P:NServiceBus.Saga.IContainSagaData.Originator">
            <summary>
            Contains the return address of the endpoint that caused the process to run.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.IContainSagaData.OriginalMessageId">
            <summary>
            Contains the Id of the message which caused the saga to start.
            This is needed so that when we reply to the Originator, any
            registered callbacks will be fired correctly.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.ContainSagaData.Id">
            <summary>
            The saga id
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.ContainSagaData.Originator">
            <summary>
            The address io the endpoint that started the saga
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.ContainSagaData.OriginalMessageId">
            <summary>
            The id of the message that started the saga
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IAmStartedByMessages`1">
            <summary>
            Use this interface to signify that when a message of the given type is
            received, if a saga cannot be found by an <see cref="T:NServiceBus.Saga.IFindSagas`1"/>
            the saga will be created.
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IFinder">
            <summary>
            Marker interface for <see cref="T:NServiceBus.Saga.IFindSagas`1.Using`1"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IFindSagas`1">
            <summary>
            Interface indicating that implementers can find sagas of the given type.
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IFindSagas`1.Using`1">
            <summary>
            Narrower interface indicating that implementers can find sagas
            of type T using messages of type M.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.IFindSagas`1.Using`1.FindBy(`1)">
            <summary>
            Finds a saga entity of the type T using a message of type M.
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IHandleSagaNotFound">
            <summary>
            Implementors will be invoked when a message arrives that should have been processed
            by a saga, but no existing saga was found. This does not include the scenario when
            a saga will be created for the given message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.IHandleSagaNotFound.Handle(System.Object)">
            <summary>
            Implementors will implement this method, likely using an injected IBus
            to send responses to the client who sent the message.
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.IHandleTimeouts`1">
            <summary>
            Tells the infrastructure that the user wants to handle a timeout of T
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.IHandleTimeouts`1.Timeout(`0)">
            <summary>
            Called when the timeout has expired
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.ISagaPersister">
            <summary>
            Defines the basic functionality of a persister for storing 
            and retrieving a saga.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.ISagaPersister.Save(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Saves the saga entity to the persistence store.
            </summary>
            <param name="saga">The saga entity to save.</param>
        </member>
        <member name="M:NServiceBus.Saga.ISagaPersister.Update(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Updates an existing saga entity in the persistence store.
            </summary>
            <param name="saga">The saga entity to updated.</param>
        </member>
        <member name="M:NServiceBus.Saga.ISagaPersister.Get``1(System.Guid)">
            <summary>
            Gets a saga entity from the persistence store by its Id.
            </summary>
            <param name="sagaId">The Id of the saga entity to get.</param>
        </member>
        <member name="M:NServiceBus.Saga.ISagaPersister.Get``1(System.String,System.Object)">
            <summary>
            Looks up a saga entity by a given property.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.ISagaPersister.Complete(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Sets a saga as completed and removes it from the active saga list
            in the persistence store.
            </summary>
            <param name="saga">The saga to complete.</param>
        </member>
        <member name="T:NServiceBus.Saga.Saga">
            <summary>
            This class is used to define sagas containing data and handling a message.
            To handle more message types, implement <see cref="T:NServiceBus.IHandleMessages`1"/>
            for the relevant types.
            To signify that the receipt of a message should start this saga,
            implement <see cref="T:NServiceBus.Saga.IAmStartedByMessages`1"/> for the relevant message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.Saga.ConfigureHowToFindSaga(NServiceBus.Saga.IConfigureHowToFindSagaWithMessage)">
            <summary>
            Override this method in order to configure how this saga's data should be found.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.Saga.RequestTimeout``1(System.DateTime)">
            <summary>
            Request for a timeout to occur at the given <see cref="T:System.DateTime"/>.
            </summary>
            <param name="at"><see cref="T:System.DateTime"/> to send timeout <typeparamref name="TTimeoutMessageType"/>.</param>
        </member>
        <member name="M:NServiceBus.Saga.Saga.RequestTimeout``1(System.DateTime,System.Action{``0})">
            <summary>
            Request for a timeout to occur at the given <see cref="T:System.DateTime"/>.
            </summary>
            <param name="at"><see cref="T:System.DateTime"/> to send call <paramref name="action"/>.</param>
            <param name="action">Callback to execute after <paramref name="at"/> is reached.</param>
        </member>
        <member name="M:NServiceBus.Saga.Saga.RequestTimeout``1(System.DateTime,``0)">
            <summary>
            Request for a timeout to occur at the given <see cref="T:System.DateTime"/>.
            </summary>
            <param name="at"><see cref="T:System.DateTime"/> to send timeout <paramref name="timeoutMessage"/>.</param>
            <param name="timeoutMessage">The message to send after <paramref name="at"/> is reached.</param>
        </member>
        <member name="M:NServiceBus.Saga.Saga.RequestTimeout``1(System.TimeSpan)">
            <summary>
            Request for a timeout to occur within the give <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="within">Given <see cref="T:System.TimeSpan"/> to delay timeout message by.</param>
        </member>
        <member name="M:NServiceBus.Saga.Saga.RequestTimeout``1(System.TimeSpan,System.Action{``0})">
            <summary>
            Request for a timeout to occur within the give <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="within">Given <see cref="T:System.TimeSpan"/> to delay timeout message by.</param>
            <param name="messageConstructor">An <see cref="T:System.Action"/> which initializes properties of the message that is sent after <paramref name="within"/> expires.</param>
        </member>
        <member name="M:NServiceBus.Saga.Saga.RequestTimeout``1(System.TimeSpan,``0)">
            <summary>
            Request for a timeout to occur within the given <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="within">Given <see cref="T:System.TimeSpan"/> to delay timeout message by.</param>
            <param name="timeoutMessage">The message to send after <paramref name="within"/> expires.</param>
        </member>
        <member name="M:NServiceBus.Saga.Saga.ReplyToOriginator(System.Object)">
            <summary>
            Sends the <paramref name="message"/> using the bus to the endpoint that caused this saga to start.
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.Saga.ReplyToOriginator``1(System.Action{``0})">
            <summary>
            Instantiates a message of the given type, setting its properties using the given action,
            and sends it using the bus to the endpoint that caused this saga to start.
            </summary>
            <typeparam name="TMessage">The type of message to construct.</typeparam>
            <param name="messageConstructor">An <see cref="T:System.Action"/> which initializes properties of the message reply with.</param>
        </member>
        <member name="M:NServiceBus.Saga.Saga.MarkAsComplete">
            <summary>
            Marks the saga as complete.
            This may result in the sagas state being deleted by the persister.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.Saga.Entity">
            <summary>
            The saga's typed data.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.Saga.Bus">
            <summary>
            Bus object used for retrieving the sender endpoint which caused this saga to start.
            Necessary for <see cref="M:NServiceBus.Saga.Saga.ReplyToOriginator(System.Object)"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Saga.Saga.Completed">
            <summary>
            Indicates that the saga is complete.
            In order to set this value, use the <see cref="M:NServiceBus.Saga.Saga.MarkAsComplete"/> method.
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.SagaPropertyMapper`1">
            <summary>
            A helper class that proved syntactical sugar as part of <see cref="M:NServiceBus.Saga.Saga.ConfigureHowToFindSaga(NServiceBus.Saga.IConfigureHowToFindSagaWithMessage)"/>
            </summary>
            <typeparam name="TSagaData">A type that implements <see cref="T:NServiceBus.Saga.IContainSagaData"/>.</typeparam>
        </member>
        <member name="M:NServiceBus.Saga.SagaPropertyMapper`1.ConfigureMapping``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Specify how to map between <typeparamref name="TSagaData"/> and <typeparamref name="TMessage"/>.
            </summary>
            <typeparam name="TMessage">The message type to map to.</typeparam>
            <param name="messageProperty">An <see cref="T:System.Linq.Expressions.Expression`1"/> that represents the message.</param>
            <returns>A <see cref="T:NServiceBus.Saga.ToSagaExpression`2"/> that provides the fluent chained <see cref="M:NServiceBus.Saga.ToSagaExpression`2.ToSaga(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})"/> to link <paramref name="messageProperty"/> with <typeparamref name="TSagaData"/>.</returns>
        </member>
        <member name="T:NServiceBus.Saga.Saga`1">
            <summary>
            This class is used to define sagas containing data and handling a message.
            To handle more message types, implement <see cref="T:NServiceBus.IHandleMessages`1"/>
            for the relevant types.
            To signify that the receipt of a message should start this saga,
            implement <see cref="T:NServiceBus.Saga.IAmStartedByMessages`1"/> for the relevant message type.
            </summary>
            <typeparam name="TSagaData">A type that implements <see cref="T:NServiceBus.Saga.IContainSagaData"/>.</typeparam>
        </member>
        <member name="M:NServiceBus.Saga.Saga`1.ConfigureHowToFindSaga(NServiceBus.Saga.IConfigureHowToFindSagaWithMessage)">
            <summary>
            Override this method in order to configure how this saga's data should be found.
            </summary>
            <remarks>Override <see cref="M:NServiceBus.Saga.Saga.ConfigureHowToFindSaga(NServiceBus.Saga.IConfigureHowToFindSagaWithMessage)"/> and forwards it to the generic version <see cref="M:NServiceBus.Saga.Saga`1.ConfigureHowToFindSaga(NServiceBus.Saga.SagaPropertyMapper{`0})"/></remarks>
        </member>
        <member name="M:NServiceBus.Saga.Saga`1.ConfigureHowToFindSaga(NServiceBus.Saga.SagaPropertyMapper{`0})">
            <summary>
            A generic version of <see cref="M:NServiceBus.Saga.Saga`1.ConfigureHowToFindSaga(NServiceBus.Saga.IConfigureHowToFindSagaWithMessage)"/> wraps <see cref="T:NServiceBus.Saga.IConfigureHowToFindSagaWithMessage"/> in a generic helper class (<see cref="T:NServiceBus.Saga.SagaPropertyMapper`1"/>) to provide mappings specific to <typeparamref name="TSagaData"/>.
            </summary>
            <param name="mapper">The <see cref="T:NServiceBus.Saga.SagaPropertyMapper`1"/> that wraps the <see cref="T:NServiceBus.Saga.IConfigureHowToFindSagaWithMessage"/></param>
        </member>
        <member name="P:NServiceBus.Saga.Saga`1.Data">
            <summary>
            The saga's strongly typed data. Wraps <see cref="P:NServiceBus.Saga.Saga.Entity"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Saga.ToSagaExpression`2">
            <summary>
            Allows a more fluent way to map sagas
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.ToSagaExpression`2.#ctor(NServiceBus.Saga.IConfigureHowToFindSagaWithMessage,System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            Constructs the expression
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.ToSagaExpression`2.ToSaga(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Defines the property on the saga data to which the message property should be mapped
            </summary>
            <param name="sagaEntityProperty">The property to map</param>
        </member>
        <member name="T:NServiceBus.Saga.UniqueAttribute">
            <summary>
            Used to specify that a saga property should be unique across all saga instances. 
            This will ensure that 2 saga instances don't get persisted when using the property to correlate between multiple message types
            </summary>
        </member>
        <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperty(System.Type)">
            <summary>
            Gets a single property that is marked with the <see cref="T:NServiceBus.Saga.UniqueAttribute"/> for a <see cref="T:NServiceBus.Saga.IContainSagaData"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to evaluate.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> of the property marked with a <see cref="T:NServiceBus.Saga.UniqueAttribute"/> or null if not used.</returns>
        </member>
        <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperty(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Gets a single property that is marked with the <see cref="T:NServiceBus.Saga.UniqueAttribute"/> for a <see cref="T:NServiceBus.Saga.IContainSagaData"/>.
            </summary>
            <param name="entity">A saga entity.</param>
            <returns>A <see cref="T:System.Reflection.PropertyInfo"/> of the property marked with a <see cref="T:NServiceBus.Saga.UniqueAttribute"/> or null if not used.</returns>
        </member>
        <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperties(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Gets all the properties that are marked with the <see cref="T:NServiceBus.Saga.UniqueAttribute"/> for a <see cref="T:NServiceBus.Saga.IContainSagaData"/>.
            </summary>
            <param name="entity">A <see cref="T:NServiceBus.Saga.IContainSagaData"/>.</param>
            <returns>A <see cref="T:System.Collections.Generic.IDictionary`2"/> of property names and their values.</returns>
        </member>
        <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperties(System.Type)">
            <summary>
            Gets all the properties that are marked with the <see cref="T:NServiceBus.Saga.UniqueAttribute"/> for the given <paramref name="type"/>.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>A <see cref="T:System.Linq.IQueryable"/> of <see cref="T:System.Reflection.PropertyInfo"/>.</returns>
        </member>
        <member name="T:NServiceBus.Serialization.IMessageSerializer">
            <summary>
            Interface used for serializing and deserializing messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Serialization.IMessageSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given set of messages into the given stream.
            </summary>
            <param name="message">Message to serialize.</param>
            <param name="stream">Stream for <paramref name="message"/> to be serialized into.</param>
        </member>
        <member name="M:NServiceBus.Serialization.IMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypes">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="P:NServiceBus.Serialization.IMessageSerializer.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to 
            </summary>
        </member>
        <member name="T:NServiceBus.SettingsExtentions">
            <summary>
            Provides extentions to the settings holder
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtentions.GetConfigSection``1(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
                Returns the requested config section using the current configuration source.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtentions.GetAvailableTypes(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Gets the list of types available to this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtentions.EndpointName(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the name of this endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.SettingsExtentions.LocalAddress(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
            Returns the queue name of this endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.ReadOnlySettings">
            <summary>
            Settings for readonly.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.Get``1">
            <summary>
            Gets the setting value.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/>.</typeparam>
            <returns>The setting value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.Get``1(System.String)">
            <summary>
            Gets the setting value.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="key">The key of the setting to get.</param>
            <returns>The setting value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.TryGet``1(``0@)">
            <summary>
            Safely get the settings value, returning false if the settings key was not found.
            </summary>
            <typeparam name="T">The type to get, fullname will be used as key</typeparam>
            <param name="val">The value if present</param>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.TryGet``1(System.String,``0@)">
            <summary>
            Safely get the settings value, returning false if the settings key was not found.
            </summary>
            <typeparam name="T">The type of the setting.</typeparam>
            <param name="key">The key of the setting to get.</param>
            <param name="val">The setting value.</param>
            <returns>True if found, false otherwise</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.Get(System.String)">
            <summary>
            Gets the setting value.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.GetOrDefault``1(System.String)">
            <summary>
            Gets the setting value or the <code>default(T)</code>.
            </summary>
            <typeparam name="T">The value of the setting.</typeparam>
            <param name="key">The key of the setting to get.</param>
            <returns>The setting value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasSetting(System.String)">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/></param>
            <returns>true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasSetting``1">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains the specified <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/>.</typeparam>
            <returns>true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasExplicitValue(System.String)">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains a specific value for the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/></param>
            <returns>true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains an explicit value with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.HasExplicitValue``1">
            <summary>
            Determines whether the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains a specific value for the specified <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <typeparamref name="T"/> to locate in the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/>.</typeparam>
            <returns>true if the <see cref="T:NServiceBus.Settings.ReadOnlySettings"/> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:NServiceBus.Settings.ReadOnlySettings.ApplyTo``1(NServiceBus.ObjectBuilder.IComponentConfig)">
            <summary>
            Setup property injection for the given type based on convention
            </summary>
            <typeparam name="T"></typeparam>
            <param name="config"></param>
        </member>
        <member name="T:NServiceBus.ScaleOutExtentions">
            <summary>
            Provides a fluent api to allow the configuration of <see cref="T:NServiceBus.Settings.ScaleOutSettings"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.ScaleOutExtentions.ScaleOut(NServiceBus.BusConfiguration)">
            <summary>
                Allows the user to control how the current endpoint behaves when scaled out.
            </summary>
        </member>
        <member name="T:NServiceBus.TransactionSettingsExtentions">
            <summary>
            Provides a hook to allows users fine grained control over transactionality
            </summary>
        </member>
        <member name="M:NServiceBus.TransactionSettingsExtentions.Transactions(NServiceBus.BusConfiguration)">
            <summary>
            Entry point for transaction related configuration
            </summary>
            <param name="config"><see cref="T:NServiceBus.Configure"/> instance.</param>
        </member>
        <member name="T:NServiceBus.Support.RuntimeEnvironment">
            <summary>
            Abstracts the runtime environment
            </summary>
        </member>
        <member name="P:NServiceBus.Support.RuntimeEnvironment.MachineName">
            <summary>
            Returns the machine name where this endpoint is currently running
            </summary>
        </member>
        <member name="P:NServiceBus.Support.RuntimeEnvironment.MachineNameAction">
            <summary>
            Get the machine name, allows for overrides
            </summary>
        </member>
        <member name="T:NServiceBus.Features.TimeoutManagerBasedDeferral">
            <summary>
            Adds the ability to defer messages using a timeoutmanager
            </summary>
        </member>
        <member name="M:NServiceBus.Features.TimeoutManagerBasedDeferral.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            Invoked if the feature is activated
            </summary>
            <param name="context">The feature context</param>
        </member>
        <member name="T:NServiceBus.TimeToBeReceivedAttribute">
            <summary>
            Attribute to indicate that a message has a period of time in which to be received.
            </summary>
        </member>
        <member name="M:NServiceBus.TimeToBeReceivedAttribute.#ctor(System.String)">
            <summary>
            Sets the time to be received.
            </summary>
            <param name="timeSpan">A timeSpan that can be interpreted by <see cref="M:System.TimeSpan.Parse(System.String)"/>.</param>
        </member>
        <member name="P:NServiceBus.TimeToBeReceivedAttribute.TimeToBeReceived">
            <summary>
            Gets the maximum time in which a message must be received.
            </summary>
            <remarks>
            If the interval specified by the <see cref="P:NServiceBus.TimeToBeReceivedAttribute.TimeToBeReceived"/> property expires before the message 
            is received by the destination of the message the message will automatically be canceled.
            </remarks>
        </member>
        <member name="T:NServiceBus.Transports.ConfigureTransport">
            <summary>
            Base class for configuring <see cref="T:NServiceBus.Transports.TransportDefinition"/> features.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.ConfigureTransport.#ctor">
            <summary>
             Initializes a new instance of <see cref="T:NServiceBus.Transports.ConfigureTransport"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.ConfigureTransport.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.ConfigureTransport.GetLocalAddress(NServiceBus.Settings.ReadOnlySettings)">
            <summary>
             Allows the transport to control the local address of the endpoint if needed
            </summary>
            <param name="settings">The current settings in read only mode</param>
        </member>
        <member name="M:NServiceBus.Transports.ConfigureTransport.Configure(NServiceBus.Features.FeatureConfigurationContext,System.String)">
            <summary>
            Gives the chance to implementers to set themselves up.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.ConfigureTransport.ExampleConnectionStringForErrorMessage">
            <summary>
            Used by implementations to provide an example connection string that till be used for the possible exception thrown if the <see cref="P:NServiceBus.Transports.ConfigureTransport.RequiresConnectionString"/> requirement is not met.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.ConfigureTransport.RequiresConnectionString">
            <summary>
            Used by implementations to control if a connection string is necessary.
            </summary>
            <remarks>If this is true and a connection string is not returned by <see cref="M:NServiceBus.Unicast.Transport.TransportConnectionString.GetConnectionStringOrNull"/> then an exception will be thrown.</remarks>
        </member>
        <member name="T:NServiceBus.Transports.IAuditMessages">
            <summary>
            Allows fine grained control on how messages are audited
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IAuditMessages.Audit(NServiceBus.Unicast.SendOptions,NServiceBus.TransportMessage)">
            <summary>
            Called when a message should be sent to audit
            </summary>
            <param name="sendOptions">The send options of the message</param>
            <param name="message">The actual message</param>
        </member>
        <member name="M:NServiceBus.Features.CheckMachineNameForComplianceWithDtcLimitation.Check">
            <summary>
            Method invoked to run custom code.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.UnicastBus">
            <summary>
              Used to configure the <see cref="T:NServiceBus.Unicast.UnicastBus"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Features.UnicastBus.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.DeliveryOptions">
            <summary>
            Base class for options to deliver messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.DeliveryOptions.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Unicast.DeliveryOptions"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.DeliveryOptions.EnforceMessagingBestPractices">
            <summary>
            If set messaging best practices will be enforces (on by default)
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.DeliveryOptions.EnlistInReceiveTransaction">
            <summary>
            Tells the transport to enlist the outgoing operation in the current receive transaction if possible.
            This is enabled by default
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.DeliveryOptions.ReplyToAddress">
            <summary>
            The reply address to use for outgoing messages
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Messages.LogicalMessage">
            <summary>
            The logical message.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.LogicalMessage.UpdateMessageInstance(System.Object)">
            <summary>
            Updates the message instance.
            </summary>
            <param name="newInstance">The new instance.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.LogicalMessage.MessageType">
            <summary>
            The <see cref="T:System.Type"/> of the message instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.LogicalMessage.Headers">
            <summary>
                Gets other applicative out-of-band information.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.LogicalMessage.Metadata">
            <summary>
            Message metadata.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.LogicalMessage.Instance">
            <summary>
            The message instance.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Behaviors.MessageHandler">
            <summary>
            Represents a message handler and its invocation
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Behaviors.MessageHandler.Instance">
            <summary>
            The actual instance, can be a saga or just a plain handler
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Behaviors.MessageHandler.Invocation">
            <summary>
            The actual invocation
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.Contexts.IncomingContext">
            <summary>
            Incoming pipeline context.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.Contexts.IncomingContext.DoNotInvokeAnyMoreHandlers">
            <summary>
            Call this to stop the invocation of handlers.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.IncomingContext.HandlerInvocationAborted">
            <summary>
            <code>true</code> if DoNotInvokeAnyMoreHandlers has been called.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.IncomingContext.PhysicalMessage">
            <summary>
            The received message.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.IncomingContext.LogicalMessages">
            <summary>
            The received logical messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.IncomingContext.IncomingLogicalMessage">
            <summary>
            The current logical message being processed.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.IncomingContext.MessageHandler">
            <summary>
            The current <see cref="T:NServiceBus.IHandleMessages`1"/> being executed.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.PipelineExecutor">
            <summary>
            Orchestrates the execution of a pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineExecutor.#ctor(NServiceBus.Settings.ReadOnlySettings,NServiceBus.ObjectBuilder.IBuilder)">
            <summary>
            Create a new instance of <see cref="T:NServiceBus.Pipeline.PipelineExecutor"/>.
            </summary>
            <param name="settings">The settings to read data from.</param>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineExecutor.InvokePipeline``1(System.Collections.Generic.IEnumerable{System.Type},``0)">
            <summary>
            Invokes a chain of behaviors. 
            </summary>
            <typeparam name="TContext">The context to use.</typeparam>
            <param name="behaviors">The behaviors to execute in the specified order.</param>
            <param name="context">The context instance.</param>
        </member>
        <member name="M:NServiceBus.Pipeline.PipelineExecutor.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:NServiceBus.Pipeline.PipelineExecutor.Incoming">
            <summary>
            The list of incoming steps registered.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.PipelineExecutor.Outgoing">
            <summary>
            The list of outgoing steps registered.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.PipelineExecutor.CurrentContext">
            <summary>
            The current context being executed.
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.Contexts.OutgoingContext">
            <summary>
            Outgoing pipeline context.
            </summary>
        </member>
        <member name="M:NServiceBus.Pipeline.Contexts.OutgoingContext.#ctor(NServiceBus.Pipeline.BehaviorContext,NServiceBus.Unicast.DeliveryOptions,NServiceBus.Unicast.Messages.LogicalMessage)">
            <summary>
            Creates a new instance of <see cref="T:NServiceBus.Pipeline.Contexts.OutgoingContext"/>.
            </summary>
            <param name="parentContext">The parent context.</param>
            <param name="deliveryOptions">The delivery options.</param>
            <param name="message">The actual message to be sent out.</param>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.OutgoingContext.DeliveryOptions">
            <summary>
            Sending options.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.OutgoingContext.OutgoingLogicalMessage">
            <summary>
            Outgoing logical message.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.OutgoingContext.IncomingMessage">
            <summary>
            The received message, if any.
            </summary>
        </member>
        <member name="P:NServiceBus.Pipeline.Contexts.OutgoingContext.OutgoingMessage">
            <summary>
            The message about to be sent out.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.ActiveSagaInstance">
            <summary>
            Represents a saga instance being processed on the pipeline
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.ActiveSagaInstance.AttachNewEntity(NServiceBus.Saga.IContainSagaData)">
            <summary>
            Provides a way to update the actual saga entity
            </summary>
            <param name="sagaEntity">The new entity</param>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.SagaId">
            <summary>
            The id of the saga
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.SagaType">
            <summary>
            The type of the saga
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.Metadata">
            <summary>
            Metadata for this active saga
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.Instance">
            <summary>
            The actual saga instance
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.IsNew">
            <summary>
            True if this saga was created by this incoming message
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.ActiveSagaInstance.NotFound">
            <summary>
            True if no saga instance could be found for this message
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Messages.LogicalMessageFactory">
            <summary>
            Factory to create <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/>s.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.LogicalMessageFactory.#ctor(NServiceBus.Unicast.Messages.MessageMetadataRegistry,NServiceBus.MessageInterfaces.IMessageMapper,NServiceBus.Pipeline.PipelineExecutor)">
            <summary>
            Ctor
            </summary>
            <param name="messageMetadataRegistry"></param>
            <param name="messageMapper"></param>
            <param name="pipelineExecutor"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.LogicalMessageFactory.Create(System.Object)">
            <summary>
            Creates a new <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/> using the specified message instance.
            </summary>
            <param name="message">The message instance.</param>
            <returns>A new <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/>.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.LogicalMessageFactory.Create(System.Type,System.Object,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/> using the specified messageType, message instance and headers.
            </summary>
            <param name="messageType">The message type.</param>
            <param name="message">The message instance.</param>
            <param name="headers">The message headers.</param>
            <returns>A new <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/>.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.LogicalMessageFactory.CreateControl(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new control <see cref="T:NServiceBus.Unicast.Messages.LogicalMessage"/>.
            </summary>
            <param name="headers">Any additional headers</param>
        </member>
        <member name="T:NServiceBus.Unicast.PublishOptions">
            <summary>
            Additional options that only applies when publishing messages
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.PublishOptions.#ctor(System.Type)">
            <summary>
            The event type is required for a publish
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.PublishOptions.EventType">
            <summary>
            The type of event to publish
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.ReplyOptions">
            <summary>
            Additional options that only apply for reply messages
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.SendOptions">
            <summary>
            Controls how a message will be sent by the transport
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.SendOptions.#ctor(NServiceBus.Address)">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Unicast.SendOptions"/>.
            </summary>
            <param name="destination">Address where to send this message</param>
        </member>
        <member name="M:NServiceBus.Unicast.SendOptions.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Unicast.SendOptions"/>.
            </summary>
            <param name="destination">Address where to send this message</param>
        </member>
        <member name="P:NServiceBus.Unicast.SendOptions.CorrelationId">
            <summary>
            The correlation id to be used on the message. Mostly used when doing Bus.Reply
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.SendOptions.DeliverAt">
            <summary>
            The time when the message should be delivered to the destination
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.SendOptions.DelayDeliveryWith">
            <summary>
            How long to delay delivery of the message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.SendOptions.Destination">
            <summary>
            Address where to send this message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.SendOptions.TimeToBeReceived">
            <summary>
            The TTR to use for this message
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.ReplyOptions.#ctor(NServiceBus.Address,System.String)">
            <summary>
            Both a destination and a correlation id is required when replying
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IManageSubscriptions">
            <summary>
            Implemented by transports to provide pub/sub capabilities
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IManageSubscriptions.Subscribe(System.Type,NServiceBus.Address)">
            <summary>
            Subscribes to the given event. For message driven transports like msmq and sqlserver the address of the publisher is needed as well
            </summary>
            <param name="eventType">The event type</param>
            <param name="publisherAddress">The publisher address if needed</param>
        </member>
        <member name="M:NServiceBus.Transports.IManageSubscriptions.Unsubscribe(System.Type,NServiceBus.Address)">
            <summary>
            Unsubscribes from the given event. For message driven transports like msmq and sqlserver the address of the publisher is needed as well
            </summary>
            <param name="eventType">The event type</param>
            <param name="publisherAddress">The publisher address if needed</param>
        </member>
        <member name="T:NServiceBus.Unicast.UnicastBus">
            <summary>
            A unicast implementation of <see cref="T:NServiceBus.IBus"/> for NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Unicast.UnicastBus"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Publish``1(System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Publish``1"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(``0)">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Publish``1(``0)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe``1">
            <summary>
            <see cref="M:NServiceBus.IBus.Subscribe``1"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe(System.Type)">
            <summary>
            <see cref="M:NServiceBus.IBus.Subscribe(System.Type)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe``1">
            <summary>
            <see cref="M:NServiceBus.IBus.Unsubscribe``1"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe(System.Type)">
            <summary>
            <see cref="M:NServiceBus.IBus.Unsubscribe(System.Type)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Reply(System.Object)">
            <summary>
            <see cref="M:NServiceBus.IBus.Reply(System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Reply``1(System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.IBus.Reply``1(System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Return``1(``0)">
            <summary>
            <see cref="M:NServiceBus.IBus.Return``1(``0)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.HandleCurrentMessageLater">
            <summary>
            <see cref="M:NServiceBus.IBus.HandleCurrentMessageLater"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.ForwardCurrentMessageTo(System.String)">
            <summary>
            <see cref="M:NServiceBus.IBus.ForwardCurrentMessageTo(System.String)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.SendLocal``1(System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.IBus.SendLocal``1(System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.SendLocal(System.Object)">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send(System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send``1(System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send``1(System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send(System.Object)">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send(System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send``1(System.String,System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send``1(System.String,System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send``1(NServiceBus.Address,System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send``1(NServiceBus.Address,System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send(System.String,System.Object)">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send(System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send(NServiceBus.Address,System.Object)">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send(NServiceBus.Address,System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send``1(System.String,System.String,System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send``1(System.String,System.String,System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send``1(NServiceBus.Address,System.String,System.Action{``0})">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send``1(NServiceBus.Address,System.String,System.Action{``0})"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send(System.String,System.String,System.Object)">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send(System.String,System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Send(NServiceBus.Address,System.String,System.Object)">
            <summary>
            <see cref="M:NServiceBus.ISendOnlyBus.Send(NServiceBus.Address,System.String,System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Defer(System.TimeSpan,System.Object)">
            <summary>
            <see cref="M:NServiceBus.IBus.Defer(System.TimeSpan,System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Defer(System.DateTime,System.Object)">
            <summary>
            <see cref="M:NServiceBus.IBus.Defer(System.DateTime,System.Object)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Start">
            <summary>
            <see cref="M:NServiceBus.IStartableBus.Start"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Dispose">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.DoNotContinueDispatchingCurrentMessageToHandlers">
            <summary>
            <see cref="M:NServiceBus.IBus.DoNotContinueDispatchingCurrentMessageToHandlers"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessageType(System.Type)">
            <summary>
            Gets the destination address For a message type.
            </summary>
            <param name="messageType">The message type to get the destination for.</param>
            <returns>The address of the destination associated with the message type.</returns>
        </member>
        <member name="F:NServiceBus.Unicast.UnicastBus.messageIdToAsyncResultLookup">
            <summary>
            Map of message identifiers to Async Results - useful for cleanup in case of timeouts.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.SetHeaderAction">
            <summary>
            The <see cref="T:System.Action`3"/> used to set the header in the bus.SetMessageHeader(msg, key, value) method.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.GetHeaderAction">
            <summary>
            The <see cref="T:System.Func`3"/> used to get the header value in the bus.GetMessageHeader(msg, key) method.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.HostInformation">
            <summary>
            Provides access to the current host information
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.Settings">
            <summary>
            Access to the current settings
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.Transport">
            <summary>
            Sets an <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> implementation to use as the
            listening endpoint for the bus.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.CriticalError">
            <summary>
            Critical error handling
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageSender">
            <summary>
            Message queue used to send messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.Configure">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.Builder">
            <summary>
            Sets <see cref="T:NServiceBus.ObjectBuilder.IBuilder"/> implementation that will be used to 
            dynamically instantiate and execute message handlers.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageMapper">
            <summary>
            Gets/sets the message mapper.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.PropagateReturnAddressOnSend">
            <summary>
            Sets whether or not the return address of a received message 
            should be propagated when the message is forwarded. This field is
            used primarily for the Distributor.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageRouter">
            <summary>
            The router for this <see cref="T:NServiceBus.Unicast.UnicastBus"/>
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.SubscriptionManager">
            <summary>
            The registered subscription manager for this bus instance
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.DoNotStartTransport">
            <summary>
            Allow disabling the unicast bus.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.InputAddress">
            <summary>
            The address of this endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.OutgoingHeaders">
            <summary>
            <see cref="P:NServiceBus.ISendOnlyBus.OutgoingHeaders"/>
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.CurrentMessageContext">
            <summary>
            <see cref="P:NServiceBus.IBus.CurrentMessageContext"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.BinarySerialization">
            <summary>
            Uses Binary as the message serialization.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.BinarySerialization.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.FeaturesReport">
            <summary>
                Provides diagnostics data about <see cref="T:NServiceBus.Features.Feature"/>s.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeaturesReport.Features">
            <summary>
                List of <see cref="T:NServiceBus.Features.Feature"/>s diagnostic data.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.FeatureDiagnosticData">
            <summary>
                <see cref="T:NServiceBus.Features.Feature"/> diagnostics data.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.Name">
            <summary>
                Gets the <see cref="T:NServiceBus.Features.Feature"/> name.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.EnabledByDefault">
            <summary>
                Gets whether <see cref="T:NServiceBus.Features.Feature"/> is set to be enabled by default.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.Active">
            <summary>
                Gets the status of the <see cref="T:NServiceBus.Features.Feature"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.PrerequisiteStatus">
            <summary>
                Gets the status of the prerequisites for this <see cref="T:NServiceBus.Features.Feature"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.Dependencies">
            <summary>
                Gets the list of <see cref="T:NServiceBus.Features.Feature"/>s that this <see cref="T:NServiceBus.Features.Feature"/> depends on.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.Version">
            <summary>
                Gets the <see cref="T:NServiceBus.Features.Feature"/> version.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.StartupTasks">
            <summary>
                Gets the <see cref="T:NServiceBus.Features.Feature"/> startup tasks.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureDiagnosticData.DependenciesAreMeet">
            <summary>
                Gets whether all dependant <see cref="T:NServiceBus.Features.Feature"/>s are activated.
            </summary>
        </member>
        <member name="T:NServiceBus.SecondLevelRetriesConfigExtensions">
            <summary>
            Provides config options for the SLR feature
            </summary>
        </member>
        <member name="M:NServiceBus.SecondLevelRetriesConfigExtensions.SecondLevelRetries(NServiceBus.Configure,System.Action{NServiceBus.SecondLevelRetries.Config.SecondLevelRetriesSettings})">
            <summary>
            Allows for customization of the second level retries
            </summary>
        </member>
        <member name="M:NServiceBus.SecondLevelRetriesConfigExtensions.SecondLevelRetries(NServiceBus.BusConfiguration)">
            <summary>
            Allows for customization of the second level retries
            </summary>
        </member>
        <member name="T:NServiceBus.SecondLevelRetries.Config.SecondLevelRetriesSettings">
            <summary>
            Configuration settings for second level retries
            </summary>
        </member>
        <member name="M:NServiceBus.SecondLevelRetries.Config.SecondLevelRetriesSettings.CustomRetryPolicy(System.Func{NServiceBus.TransportMessage,System.TimeSpan})">
            <summary>
            Register a custom retry policy
            </summary>
        </member>
        <member name="T:NServiceBus.Features.BsonSerialization">
            <summary>
            Uses Bson as the message serialization.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.BsonSerialization.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.JsonSerialization">
            <summary>
            Uses JSON as the message serialization.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.JsonSerialization.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="M:NServiceBus.JsonSerializerConfigurationExtensions.Encoding(NServiceBus.Serialization.SerializationExtentions{NServiceBus.JsonSerializer},System.Text.Encoding)">
            <summary>
            Configures the encoding of JSON stream
            </summary>
            <param name="config">The configuration object</param>
            <param name="encoding">Encoding to use for serialization and deserialization</param>
        </member>
        <member name="T:NServiceBus.Features.XmlSerialization">
            <summary>
            Used to configure xml as a message serializer
            </summary>
        </member>
        <member name="M:NServiceBus.Features.XmlSerialization.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.XmlSerializerConfigurationExtensions">
            <summary>
            XmlSerializer configuration extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSerializerConfigurationExtensions.Xml(NServiceBus.Settings.SerializationSettings,System.Action{NServiceBus.Serializers.XML.Config.XmlSerializationSettings})">
            <summary>
            Enables the xml message serializer with the given settings
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.SerializationSettings">
            <summary>
            Settings related to message serialization
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SerializationSettings.WrapSingleMessages">
            <summary>
            Tells the framework to always wrap out going messages as if there was multiple messages being sent
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SerializationSettings.DontWrapSingleMessages">
            <summary>
            Tells the framework to not wrap out going messages as if there was multiple messages being sent
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.ScaleOutSettings">
            <summary>
            Placeholder for the various settings related to how a endpoint is scaled out
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ScaleOutSettings.UseSingleBrokerQueue">
            <summary>
            Instructs the broker based transports to use a single queue for the endpoint regardless of which machine its running on. 
            This is suitable for backend processing endpoints and is the default for the As_aServer role.
            Clients that needs to make use of callbacks needs to make sure that this setting is off since they need to have a unique 
            input queue per machine in order to not miss any of the callbacks.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ScaleOutSettings.UseUniqueBrokerQueuePerMachine">
            <summary>
            Instructs the broker based transports to use a separate queue per endpoint when running on multiple machines. 
            This allows clients to make use of callbacks. This setting is the default.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.MsmqTransportConfigurator">
            <summary>
            Used to configure the MSMQ transport.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.MsmqTransportConfigurator.Configure(NServiceBus.Features.FeatureConfigurationContext,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Transports.ConfigureTransport"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.MsmqTransportConfigurator.ExampleConnectionStringForErrorMessage">
            <summary>
            <see cref="P:NServiceBus.Transports.ConfigureTransport.ExampleConnectionStringForErrorMessage"/>
            </summary>
        </member>
        <member name="P:NServiceBus.Features.MsmqTransportConfigurator.RequiresConnectionString">
            <summary>
            <see cref="P:NServiceBus.Transports.ConfigureTransport.RequiresConnectionString"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.TimeoutManager">
            <summary>
            Used to configure the timeout manager that provides message deferral.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.TimeoutManager.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.DefaultConfigurationSource">
            <summary>
            A configuration source implementation on top of ConfigurationManager.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.IConfigurationSource">
            <summary>
            Abstraction of a source of configuration data.
            Implement this interface if you want to change the source of all configuration data.
            If you want to change the source of only a specific set of configuration data,
            implement <see cref="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1"/> instead.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ConfigurationSource.IConfigurationSource.GetConfiguration``1">
            <summary>
            Returns configuration data based on the given type.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1">
            <summary>
            Abstraction of a configuration source for a given piece of configuration data. 
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1.GetConfiguration">
            <summary>
            Returns configuration data for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.Conventions.EndpointHelper.GetDefaultEndpointName">
            <summary>
            Gets the name of this endpoint
            </summary>
            <returns>The name of the endpoint.</returns>
        </member>
        <member name="M:NServiceBus.Config.Conventions.EndpointHelper.GetEndpointVersion">
            <summary>
            Gets the version of the endpoint.
            </summary>
            <returns>The <see cref="T:System.Version"/> the endpoint.</returns>
        </member>
        <member name="T:NServiceBus.Config.Logging">
            <summary>
            Logging ConfigurationSection
            </summary>
        </member>
        <member name="P:NServiceBus.Config.Logging.Threshold">
            <summary>
            The minimal logging level above which all calls to the log will be written
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MasterNodeConfig">
            <summary>
            Configuration section for holding the node which is the master.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MasterNodeConfig.Node">
            <summary>
            The node .
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MessageEndpointMapping">
            <summary>
            A configuration element representing which message types map to which endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMapping.Configure(System.Action{System.Type,NServiceBus.Address})">
            <summary>
            Uses the configuration properties to configure the endpoint mapping
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMapping.CompareTo(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Comparison support
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Messages">
            <summary>
            A string defining the message assembly, or single message type.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Endpoint">
            <summary>
            The endpoint named according to "queue@machine".
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.AssemblyName">
            <summary>
            The message assembly for the endpoint mapping.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.TypeFullName">
            <summary>
            The fully qualified name of the message type. Define this if you want to map a single message type to the endpoint.
            </summary>
            <remarks>Type will take preference above namespace</remarks>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Namespace">
            <summary>
            The message type. Define this if you want to map all the types in the namespace to the endpoint.
            </summary>
            <remarks>Sub-namespaces will not be mapped.</remarks>
        </member>
        <member name="T:NServiceBus.Config.MessageEndpointMappingCollection">
            <summary>
            A configuration element collection of MessageEndpointMappings.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement">
            <summary>
            Creates a new MessageEndpointMapping.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new MessageEndpointMapping, setting its Message property to the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the Messages property of the given MessageEndpointMapping element.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.IndexOf(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Calls BaseIndexOf on the given mapping.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Add(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Calls BaseAdd.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            If the mapping exists, calls BaseRemove on it.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.RemoveAt(System.Int32)">
            <summary>
            Calls BaseRemoveAt.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(System.String)">
            <summary>
            Calls BaseRemove.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Clear">
            <summary>
            Calls BaseClear.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.IsReadOnly">
            <summary>
            True if the collection is readonly
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.CollectionType">
            <summary>
            Returns AddRemoveClearMap.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.AddElementName">
            <summary>
            Calls the base AddElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.ClearElementName">
            <summary>
            Calls the base ClearElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.RemoveElementName">
            <summary>
            Returns the base RemoveElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Count">
            <summary>
            Returns the base Count.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.Int32)">
            <summary>
            Gets/sets the MessageEndpointMapping at the given index.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.String)">
            <summary>
            Gets the MessageEndpointMapping for the given name.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig">
            <summary>
            Message Forwarding In Case Of Fault Config
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig.ErrorQueue">
            <summary>
            The queue to which errors will be forwarded.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Sagas">
            <summary>
                Used to configure saga.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
                See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Satellites.IAdvancedSatellite">
            <summary>
            Interface for satellites that needs more control over how the receiver is being setup
            </summary>
        </member>
        <member name="T:NServiceBus.Satellites.ISatellite">
            <summary>
            Implement this interface to create a Satellite.
            </summary>
        </member>
        <member name="M:NServiceBus.Satellites.ISatellite.Handle(NServiceBus.TransportMessage)">
            <summary>
            This method is called when a message is available to be processed.
            </summary>
            <param name="message">The <see cref="T:NServiceBus.TransportMessage"/> received.</param>
            <returns>If <code>false</code> then <see cref="T:NServiceBus.Satellites.SatelliteLauncher"/> will call <see cref="M:NServiceBus.Unicast.Transport.ITransport.AbortHandlingCurrentMessage"/></returns>
        </member>
        <member name="M:NServiceBus.Satellites.ISatellite.Start">
            <summary>
            Starts the <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Satellites.ISatellite.Stop">
            <summary>
            Stops the <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Satellites.ISatellite.InputAddress">
            <summary>
            The <see cref="T:NServiceBus.Address"/> for this <see cref="T:NServiceBus.Satellites.ISatellite"/> to use when receiving messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Satellites.ISatellite.Disabled">
            <summary>
            Set to <code>true</code> to disable this <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Satellites.IAdvancedSatellite.GetReceiverCustomization">
            <summary>
            Gets the customizations to apply to the receiver
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.SettingsHolder">
            <summary>
            Setting container.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get``1(System.String)">
            <summary>
            Gets the given setting by key
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="key">The key</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.TryGet``1(``0@)">
            <summary>
            Tries to get the given value, key is the type fullname
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="val">The returned value if present</param>
            <returns>True if found</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.TryGet``1(System.String,``0@)">
            <summary>
            Tries to get the given value by key
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="key">The key</param>
            <param name="val">Value if found</param>
            <returns>True if key is found</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get``1">
            <summary>
            Gets the given value, key is type fullname
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The value if found, throws if not</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get(System.String)">
            <summary>
            Gets the given value by key
            </summary>
            <param name="key">The key</param>
            <returns>The value</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set(System.String,System.Object)">
            <summary>
            Sets the setting value.
            </summary>
            <param name="key">The key to use to store the setting.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set``1(System.Object)">
            <summary>
            Sets the value
            </summary>
            <typeparam name="T">The type to use as a key for storing the setting.</typeparam>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set``1(System.Action)">
            <summary>
            Sets the given value, key is type fullname
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="value">Action to store</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Sets the value of the given property
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetPropertyDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Sets the default value of the given property
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault``1(System.Object)">
            <summary>
            Sets the default setting value.
            </summary>
            <typeparam name="T">The type to use as a key for storing the setting.</typeparam>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault``1(System.Action)">
            <summary>
            Sets the default value for the given setting
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="value">The value to store as default</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault(System.String,System.Object)">
            <summary>
            Set the default value for the given key
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.GetOrDefault``1">
            <summary>
            Gets the setting or default based on the typename
            </summary>
            <typeparam name="T">The setting to get</typeparam>
            <returns>The actual value</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.GetOrDefault``1(System.String)">
            <summary>
            Gets the value or its default
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="key">The key</param>
            <returns>The value</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasSetting(System.String)">
            <summary>
            True if there is a default or explicit value for the given key
            </summary>
            <param name="key">The Key</param>
            <returns>True if found</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasSetting``1">
            <summary>
            True if there is a setting for the given type
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>True if found</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasExplicitValue(System.String)">
            <summary>
            True if there is an explicit value for the given key
            </summary>
            <param name="key">The Key</param>
            <returns>True if found</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.HasExplicitValue``1">
            <summary>
            True if there is an explicit value for the given type
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>True if found</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.PreventChanges">
            <summary>
            Locks the settings to prevent further modifications
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.ApplyTo``1(NServiceBus.ObjectBuilder.IComponentConfig)">
            <summary>
            Applies property inject for the given type based on convention
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="config"></param>
        </member>
        <member name="T:NServiceBus.Transports.ICreateQueues">
            <summary>
            Abstraction of the capability to create queues
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.ICreateQueues.CreateQueueIfNecessary(NServiceBus.Address,System.String)">
            <summary>
            Create a messages queue where its name is the address parameter, for the given account.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IDeferMessages">
            <summary>
            Called when the bus wants to defer a message
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IDeferMessages.Defer(NServiceBus.TransportMessage,NServiceBus.Unicast.SendOptions)">
            <summary>
            Defers the given message
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IDeferMessages.ClearDeferredMessages(System.String,System.String)">
            <summary>
            Clears all timeouts for the given header
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IDequeueMessages">
            <summary>
            Interface to implement when developing custom dequeuing strategies.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IDequeueMessages.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
            <summary>
            Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
            <param name="address">The address to listen on.</param>
            <param name="transactionSettings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings"/> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.</param>
            <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
            <param name="endProcessMessage">Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages"/> after the message has been processed regardless if the outcome was successful or not.</param>
        </member>
        <member name="M:NServiceBus.Transports.IDequeueMessages.Start(System.Int32)">
            <summary>
            Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel"/>.
            </summary>
            <param name="maximumConcurrencyLevel">Indicates the maximum concurrency level this <see cref="T:NServiceBus.Transports.IDequeueMessages"/> is able to support.</param>
        </member>
        <member name="M:NServiceBus.Transports.IDequeueMessages.Stop">
            <summary>
            Stops the dequeuing of messages.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IPublishMessages">
            <summary>
            Requests a message to be published
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IPublishMessages.Publish(NServiceBus.TransportMessage,NServiceBus.Unicast.PublishOptions)">
            <summary>
            Publishes the given messages to all known subscribers
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.ISendMessages">
            <summary>
            Abstraction of the capability to send messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.ISendMessages.Send(NServiceBus.TransportMessage,NServiceBus.Unicast.SendOptions)">
            <summary>
            Sends the given <paramref name="message"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.TransportDefinition">
            <summary>
            Defines a transport that can be used by NServiceBus
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.TransportDefinition.Configure(NServiceBus.BusConfiguration)">
            <summary>
            Gives implementations access to the <see cref="T:NServiceBus.BusConfiguration"/> instance at configuration time.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.TransportDefinition.HasNativePubSubSupport">
            <summary>
            Indicates that the transport is capable of supporting the publish and subscribe pattern natively
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.TransportDefinition.HasSupportForCentralizedPubSub">
            <summary>
            Indicates that the transport has a central store for subscriptions
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.TransportDefinition.HasSupportForDistributedTransactions">
            <summary>
            Indicates that the transport has support for distributed transactions
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.TransportDefinition.RequireOutboxConsent">
            <summary>
            True if the transport
            </summary>
        </member>
        <member name="T:NServiceBus.MsmqTransport">
            <summary>
            Transport definition for MSMQ
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqTransport.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqTransport.Configure(NServiceBus.BusConfiguration)">
            <summary>
            Gives implementations access to the <see cref="T:NServiceBus.BusConfiguration"/> instance at configuration time.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.Config.MsmqSettings">
            <summary>
            Runtime settings for the Msmq transport
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.Config.MsmqSettings.#ctor">
            <summary>
            Constructs the settings class with defaults
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseDeadLetterQueue">
            <summary>
            Determines if the dead letter queue should be used
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseJournalQueue">
            <summary>
            Determines if journaling should be activated
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseConnectionCache">
            <summary>
            Gets or sets a value that indicates whether a cache of connections will be maintained by the application.
            </summary> 
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseTransactionalQueues">
            <summary>
            Determines if the system uses transactional queues
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.TimeToReachQueue">
            <summary>
            Gets or sets the maximum amount of time for the message to reach the queue.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.HeaderInfo">
            <summary>
            Represents the structure of header information passed in a TransportMessage.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.HeaderInfo.Key">
            <summary>
            The key used to lookup the value in the header collection.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.HeaderInfo.Value">
            <summary>
            The value stored under the key in the header collection.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.MsmqDequeueStrategy">
            <summary>
                Default implementation of <see cref="T:NServiceBus.Transports.IDequeueMessages"/> for MSMQ.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.#ctor(NServiceBus.Configure,NServiceBus.CriticalError,NServiceBus.Transports.Msmq.MsmqUnitOfWork)">
            <summary>
                Creates an instance of <see cref="T:NServiceBus.Transports.Msmq.MsmqDequeueStrategy"/>.
            </summary>
            <param name="configure">Configure</param>
            <param name="criticalError">CriticalError</param>
            <param name="unitOfWork">MsmqUnitOfWork</param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
            <summary>
                Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
            <param name="address">The address to listen on.</param>
            <param name="settings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings"/> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.</param>
            <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
            <param name="endProcessMessage">
                Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages"/> after the message has been
                processed regardless if the outcome was successful or not.
            </param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Start(System.Int32)">
            <summary>
                Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel" />.
            </summary>
            <param name="maximumConcurrencyLevel">The maximum concurrency level supported.</param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Stop">
            <summary>
                Stops the dequeuing of messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.ErrorQueue">
            <summary>
            The address of the configured error queue. 
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.MsmqMessageSender">
            <summary>
            Default MSMQ <see cref="T:NServiceBus.Transports.ISendMessages"/> implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqMessageSender.Send(NServiceBus.TransportMessage,NServiceBus.Unicast.SendOptions)">
            <summary>
            Sends the given <paramref name="message"/>
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqMessageSender.Settings">
            <summary>
            MsmqSettings
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqMessageSender.UnitOfWork">
            <summary>
            MsmqUnitOfWork
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqMessageSender.SuppressDistributedTransactions">
            <summary>
            SuppressDistributedTransactions
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.CreateQueueIfNecessary(NServiceBus.Address,System.String)">
            <summary>
             Utility method for creating a queue if it does not exist.
            </summary>
            <param name="address">Queue path to create</param>
            <param name="account">The account to be given permissions to the queue</param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.GetFullPathWithoutPrefix(NServiceBus.Address)">
            <summary>
            Returns the full path without Format or direct os
            from an address.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.SetPermissionsForQueue(System.Messaging.MessageQueue,System.String)">
            <summary>
            Sets default permissions for queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqQueueCreator.Settings">
            <summary>
            The current runtime settings
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.MsmqUnitOfWork">
            <summary>
            Msmq unit of work to be used in non DTC mode.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUnitOfWork.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUnitOfWork.HasActiveTransaction">
            <summary>
            Checks whether a <see cref="T:System.Messaging.MessageQueueTransaction"/> exists.
            </summary>
            <returns><code>true</code> if a <see cref="T:System.Messaging.MessageQueueTransaction"/> is currently in progress, otherwise <code>false</code>.</returns>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqUnitOfWork.Transaction">
            <summary>
            Current <see cref="T:System.Messaging.MessageQueueTransaction"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.MsmqUtilities">
            <summary>
                MSMQ-related utility functions
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqUtilities.GetFullPath(NServiceBus.Address)">
            <summary>
                Turns a '@' separated value into a full path.
                Format is 'queue@machine', or 'queue@ipaddress'
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqUtilities.GetReturnAddress(System.String,System.String)">
            <summary>
                Gets the name of the return address from the provided value.
                If the target includes a machine name, uses the local machine name in the returned value
                otherwise uses the local IP address in the returned value.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqUtilities.GetReturnAddress(NServiceBus.Address,NServiceBus.Address)">
            <summary>
                Gets the name of the return address from the provided value.
                If the target includes a machine name, uses the local machine name in the returned value
                otherwise uses the local IP address in the returned value.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqUtilities.Convert(System.Messaging.Message)">
            <summary>
                Converts an MSMQ message to a TransportMessage.
            </summary>
        </member>
        <member name="M:NServiceBus.MsmqUtilities.Convert(NServiceBus.TransportMessage)">
            <summary>
                Converts a TransportMessage to an Msmq message.
                Doesn't set the ResponseQueue of the result.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MsmqSubscriptionStorageConfig">
            <summary>
            Contains the properties representing the MsmqSubscriptionStorage configuration section.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqSubscriptionStorageConfig.Queue">
            <summary>
            The queue where subscription data will be stored.
            Use the "queue@machine" convention.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.RijndaelEncryptionServiceConfig">
            <summary>
            Used to configure Rijndael encryption service.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.Key">
            <summary>
            The encryption key.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.ExpiredKeys">
            <summary>
            Contains the encryption keys to use.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.SecondLevelRetriesConfig">
            <summary>
            Configuration options for the SLR feature
            </summary>
        </member>
        <member name="M:NServiceBus.Config.SecondLevelRetriesConfig.#ctor">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Config.SecondLevelRetriesConfig"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.SecondLevelRetriesConfig.Enabled">
            <summary>
            True if SLR should be used
            </summary>
        </member>
        <member name="P:NServiceBus.Config.SecondLevelRetriesConfig.TimeIncrease">
            <summary>
            Sets the time to increase the delay between retries
            </summary>
        </member>
        <member name="P:NServiceBus.Config.SecondLevelRetriesConfig.NumberOfRetries">
            <summary>
            Sets the number of retries to do before aborting and sending the message to the error queue
            </summary>
        </member>
        <member name="T:NServiceBus.Features.SecondLevelRetries">
            <summary>
            Used to configure Second Level Retries.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.SecondLevelRetries.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Config.TransportConfig">
            <summary>
            Settings that applies to the transport
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TransportConfig.MaximumConcurrencyLevel">
            <summary>
            Specifies the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TransportConfig.MaxRetries">
            <summary>
            The maximum number of times to retry processing a message
            when it fails before moving it to the error queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TransportConfig.MaximumMessageThroughputPerSecond">
            <summary>
            The max throughput for the transport. This allows the user to throttle their endpoint if needed
            </summary>
        </member>
        <member name="T:NServiceBus.Config.UnicastBusConfig">
            <summary>
            A configuration section for UnicastBus specific settings.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorControlAddress">
            <summary>
            Gets/sets the address for sending control messages to the distributor.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorDataAddress">
            <summary>
            Gets/sets the distributor's data address - used as the return address of messages sent by this endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.ForwardReceivedMessagesTo">
            <summary>
            Gets/sets the address to which messages received will be forwarded.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.TimeToBeReceivedOnForwardedMessages">
            <summary>
            Gets/sets the time to be received set on forwarded messages
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.TimeoutManagerAddress">
            <summary>
            Gets/sets the address that the timeout manager will use to send and receive messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.MessageEndpointMappings">
            <summary>
            Contains the mappings from message types (or groups of them) to endpoints.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.DataBusFileBased.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.IDataBusSerializer">
            <summary>
            Interface used for serializing and deserializing of databus properties.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBusSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the property into the given stream.
            </summary>
            <param name="databusProperty">The property to serialize.</param>
            <param name="stream">The stream to which to write the property.</param>>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBusSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a property from the given stream.
            </summary>
            <param name="stream">The stream from which to read the property.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:NServiceBus.DataBus.FileShareDataBusImplementation">
            <summary>
            File share implementation of <see cref="T:NServiceBus.DataBus.IDataBus"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.IDataBus">
            <summary>
            The main interface for interactions with the databus.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Get(System.String)">
            <summary>
            Gets a data item from the bus.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The data <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Put(System.IO.Stream,System.TimeSpan)">
            <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
            <param name="stream">A create containing the data to be sent on the databus.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Start">
            <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.FileShareDataBusImplementation.#ctor(System.String)">
            <summary>
            Create a <see cref="T:NServiceBus.DataBus.FileShareDataBusImplementation"/> with the specified <paramref name="basePath"/>.
            </summary>
            <param name="basePath">The path to save files on.</param>
        </member>
        <member name="M:NServiceBus.DataBus.FileShareDataBusImplementation.Get(System.String)">
            <summary>
            Gets a data item from the bus.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The data <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NServiceBus.DataBus.FileShareDataBusImplementation.Put(System.IO.Stream,System.TimeSpan)">
            <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
            <param name="stream">A create containing the data to be sent on the databus.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
        </member>
        <member name="M:NServiceBus.DataBus.FileShareDataBusImplementation.Start">
            <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
        </member>
        <member name="P:NServiceBus.DataBus.FileShareDataBusImplementation.MaxMessageTimeToLive">
            <summary>
            Gets/Sets the maximum message TTL.
            </summary>
        </member>
        <member name="T:NServiceBus.DateTimeExtensions">
            <summary>
            Common date time extensions
            </summary>
        </member>
        <member name="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to a <see cref="T:System.String"/> suitable for transport over the wire
            </summary>
        </member>
        <member name="M:NServiceBus.DateTimeExtensions.ToUtcDateTime(System.String)">
            <summary>
            Converts a wire formatted <see cref="T:System.String"/> from <see cref="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)"/> to a UTC <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="T:NServiceBus.DependencyLifecycle">
            <summary>
            Represent the various lifecycles available for components configured in the container.
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.SingleInstance">
            <summary>
            The same instance will be returned each time
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.InstancePerUnitOfWork">
            <summary>
            The instance will be singleton for the duration of the unit of work. In practice this means 
            the processing of a single transport message
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.InstancePerCall">
            <summary>
            A new instance will be returned fro each call
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.FaultsHeaderKeys">
            <summary>
            Class holding keys to message headers for faults.
            </summary>
        </member>
        <member name="F:NServiceBus.Faults.FaultsHeaderKeys.FailedQ">
            <summary>
            Header key for setting/getting the queue at which the message processing failed.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.IWantQueueCreated">
            <summary>
            Implementers signal their wish to create a queue, regardless of technology (e.g. MSMQ or SQL Server).
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.IWantQueueCreated.ShouldCreateQueue">
            <summary>
            True if no need to create queue
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.IWantQueueCreated.Address">
            <summary>
            Address of queue the implementer requires.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.Forwarder.FaultManager">
            <summary>
                Implementation of IManageMessageFailures by forwarding messages
                using ISendMessages.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.IManageMessageFailures">
            <summary>
            Interface for defining how message failures will be handled.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.IManageMessageFailures.SerializationFailedForMessage(NServiceBus.TransportMessage,System.Exception)">
            <summary>
            Invoked when the deserialization of a message failed.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.IManageMessageFailures.ProcessingAlwaysFailsForMessage(NServiceBus.TransportMessage,System.Exception)">
            <summary>
            Invoked when a message has failed its processing the maximum number of time configured.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.IManageMessageFailures.Init(NServiceBus.Address)">
            <summary>
            Initializes the fault manager
            </summary>
            <param name="address">The address of the message source</param>
        </member>
        <member name="P:NServiceBus.Faults.Forwarder.FaultManager.ErrorQueue">
            <summary>
                Endpoint to which message failures are forwarded
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.Forwarder.FaultManager.RetriesErrorQueue">
            <summary>
                The address of the Second Level Retries input queue when SLR is enabled
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.InMemory.FaultManager">
            <summary>
            Logging implementation of IManageMessageFailures.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.InMemory.FaultManager.Init(NServiceBus.Address)">
            <summary>
            Initializes the fault manager
            </summary>
            <param name="address">The address of the message source</param>
        </member>
        <member name="T:NServiceBus.EndpointNameAttribute">
            <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointNameAttribute.#ctor(System.String)">
            <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
        </member>
        <member name="P:NServiceBus.EndpointNameAttribute.Name">
            <summary>
            The name of the endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.EndpointSLAAttribute">
            <summary>
            Defines the SLA for this endpoint. Needs to be set on the endpoint configuration class
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointSLAAttribute.#ctor(System.String)">
            <summary>
            Used to define the SLA for this endpoint
            </summary>
            <param name="sla">A <see cref="T:System.String"/> representing a <see cref="T:System.TimeSpan"/></param>
        </member>
        <member name="P:NServiceBus.EndpointSLAAttribute.SLA">
            <summary>
            The SLA of the endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.IConfigureThisEndpoint">
            <summary>
            Indicate that the implementing class will specify configuration.
            </summary>
        </member>
        <member name="M:NServiceBus.IConfigureThisEndpoint.Customize(NServiceBus.BusConfiguration)">
            <summary>
            Allows to override default settings.
            </summary>
            <param name="configuration">Endpoint configuration builder.</param>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.AssemblyScanner">
            <summary>
              Helpers for assembly scanning operations
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.#ctor">
            <summary>
            Creates a new scanner that will scan the base directory of the current appdomain
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.#ctor(System.String)">
            <summary>
            Creates a scanner for the given directory
            </summary>
            <param name="baseDirectoryToScan"></param>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.GetScannableAssemblies">
            <summary>
                Traverses the specified base directory including all sub-directories, generating a list of assemblies that can be
                scanned for handlers, a list of skipped files, and a list of errors that occurred while scanning.
                Scanned files may be skipped when they're either not a .NET assembly, or if a reflection-only load of the .NET
                assembly reveals that it does not reference NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.IsIncluded(System.String)">
            <summary>
             Determines whether the specified assembly name or file name can be included, given the set up include/exclude
             patterns and default include/exclude patterns
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScanner.MustReferenceAtLeastOneAssembly">
            <summary>
            Tells the scanner to only include assemblies that reference one of the given assemblies
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScanner.ThrowExceptions">
            <summary>
            Determines if the scanner should throw exceptions or not
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.AssemblyScannerResults">
            <summary>
            Holds GetScannableAssemblies results.
            Contains list of errors and list of scan-able assemblies.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScannerResults.#ctor">
            <summary>
            Constructor to initialize AssemblyScannerResults
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.Assemblies">
            <summary>
            List of successfully found and loaded assemblies
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.SkippedFiles">
            <summary>
            List of files that were skipped while scanning because they were a) explicitly excluded
            by the user, b) not a .NET DLL, or c) not referencing NSB and thus not capable of implementing
            <see cref="T:NServiceBus.IHandleMessages`1"/>
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.ErrorsThrownDuringScanning">
            <summary>
            True if errors where encountered during assembly scanning
            </summary>
        </member>
        <member name="T:NServiceBus.Impersonation.Windows.WindowsIdentityEnricher">
            <summary>
            Stamps outgoing messages with the current windows identity
            </summary>
        </member>
        <member name="T:NServiceBus.IWantToRunBeforeConfiguration">
            <summary>
            Indicates that this class contains logic that need to be executed before other configuration
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunBeforeConfiguration.Init(NServiceBus.Configure)">
            <summary>
            Invoked before configuration starts
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.LogManager">
            <summary>
            Responsible for the creation of <see cref="T:NServiceBus.Logging.ILog"/> instances and used as an extension point to redirect log event to an external library.
            </summary>
            <remarks>
            The default logging will be to the console and a rolling log file.
            </remarks>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.Use``1">
            <summary>
            Used to inject an instance of <see cref="T:NServiceBus.Logging.ILoggerFactory"/> into <see cref="T:NServiceBus.Logging.LogManager"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.UseFactory(NServiceBus.Logging.ILoggerFactory)">
            <summary>
            An instance of <see cref="T:NServiceBus.Logging.ILoggerFactory"/> that will be used to construct <see cref="T:NServiceBus.Logging.ILog"/>s for static fields.
            </summary>
            <remarks>
            Replace this instance at application statup to redirect log event to your custom logging library.
            </remarks>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.GetLogger``1">
            <summary>
            Construct a <see cref="T:NServiceBus.Logging.ILog"/> using <typeparamref name="T"/> as the name.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            Construct a <see cref="T:NServiceBus.Logging.ILog"/> using <paramref name="type"/> as the name.
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.LogManager.GetLogger(System.String)">
            <summary>
            Construct a <see cref="T:NServiceBus.Logging.ILog"/> for <paramref name="name"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageInterfaces.IMessageMapper">
            <summary>
            Enables looking up interfaced mapped to generated concrete types.
            and vice versa.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes the mapper with the given types to be scanned.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.Type)">
            <summary>
            If the given type is an interface, returns the generated concrete type.
            If the given type is concrete, returns the interface it was generated from.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.String)">
            <summary>
            Looks up the type mapped for the given name.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper">
            <summary>
            Uses reflection to map between interfaces and their generated concrete implementations.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Scans the given types generating concrete classes for interfaces.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(System.Type,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Generates a concrete implementation of the given type if it is an interface.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetNewTypeName(System.Type)">
            <summary>
            Generates a new full name for a type to be generated for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateTypeFrom(System.Type,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Generates the concrete implementation of the given type.
            Only properties on the given type are generated in the concrete implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.AddCustomAttributeToProperty(System.Object,System.Reflection.Emit.PropertyBuilder)">
            <summary>
            Given a custom attribute and property builder, adds an instance of custom attribute
            to the property builder
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetAllProperties(System.Type)">
            <summary>
            Returns all properties on the given type, going up the inheritance hierarchy.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.Type)">
            <summary>
            If the given type is concrete, returns the interface it was generated to support.
            If the given type is an interface, returns the concrete class generated to implement it.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.String)">
            <summary>
            Returns the type mapped to the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1(System.Action{``0})">
            <summary>
            Calls the generic CreateInstance and performs the given action on the result.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1">
            <summary>
            Calls the <see cref="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)"/> and returns its result cast to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)">
            <summary>
            If the given type is an interface, finds its generated concrete implementation, instantiates it, and returns the result.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateTransportMessages">
            <summary>
            Use this interface to change transport messages before any other code sees them. 
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder">
            <summary>
             Autofac implementation of <see cref="T:NServiceBus.ObjectBuilder.Common.IContainer"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.IContainer">
            <summary>
            Abstraction of a container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Build(System.Type)">
            <summary>
            Returns an instantiation of the given type.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildChildContainer">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
            <returns>Returns a new child container.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildAll(System.Type)">
            <summary>
            Returns a list of objects instantiated because their type is compatible
            with the given type.
            </summary>
            <param name="typeToBuild">Type to be build.</param>
            <returns>Enumeration of all types that implement <paramref name="typeToBuild"/>.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type.
            </summary>
            <param name="component">Type to be configured</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type using a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T">Type to be configured.</typeparam>
            <param name="component"><see cref="T:System.Func`1"/> to use to configure.</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.ConfigureProperty(System.Type,System.String,System.Object)">
            <summary>
            Sets the value to be configured for the given property of the 
            given component type.
            </summary>
            <param name="component">The interface type.</param>
            <param name="property">The property name to be injected.</param>
            <param name="value">The value to assign to the <paramref name="property"/>.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned for the given type.
            </summary>
            <param name="lookupType">The interface type.</param>
            <param name="instance">The implementation instance.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.HasComponent(System.Type)">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
            <param name="componentType">Component type to check.</param>
            <returns><c>true</c> if the <paramref name="componentType"/> is registered in the container or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Release(System.Object)">
            <summary>
            Releases a component instance.
            </summary>
            <param name="instance">The component instance to release.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.#ctor(Autofac.ILifetimeScope)">
            <summary>
             Instantiates the class utilizing the given container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.#ctor">
            <summary>
             Instantiates the class with an empty Autofac container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.BuildChildContainer">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Build(System.Type)">
            <summary>
             Build an instance of a given type using Autofac.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.BuildAll(System.Type)">
            <summary>
             Build all instances of a given type using Autofac.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.ConfigureProperty(System.Type,System.String,System.Object)">
            <summary>
             Configure the value of a named component property.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.RegisterSingleton(System.Type,System.Object)">
            <summary>
             Register a singleton instance of a dependency within Autofac.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
             Set a property value on an instance using reflection
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder">
            <summary>
            Implementation of IBuilder, serving as a facade that container specific implementations
            of IContainer should run behind.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IBuilder">
            <summary>
            Used to instantiate types, so that all configured dependencies
            and property values are set.
            An abstraction on top of dependency injection frameworks.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build(System.Type)">
            <summary>
            Returns an instantiation of the given type.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.CreateChildBuilder">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
            <returns>Returns a new child container.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build``1">
            <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll``1">
            <summary>
            For each type that is compatible with T, an instance is created with all dependencies injected, and yielded to the caller.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instances of <typeparamref name="T"/></returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll(System.Type)">
            <summary>
            For each type that is compatible with the given type, an instance is created with all dependencies injected.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <returns>The component instances.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Release(System.Object)">
            <summary>
            Releases a component instance.
            </summary>
            <param name="instance">The component instance to release.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAndDispatch(System.Type,System.Action{System.Object})">
            <summary>
            Builds an instance of the defined type injecting it with all defined dependencies
            and invokes the given action on the instance.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <param name="action">The callback to call.</param>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IConfigureComponents">
            <summary>
            Used to configure components in the container.
            Should primarily be used at startup/initialization time.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type. Can be used to configure all kinds of properties.
            </summary>
            <param name="concreteComponent">The concrete implementation of the component.</param>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
            <typeparam name="T">Type to configure</typeparam>
            <param name="componentFactory">Factory method that returns the given type</param>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Configures the given property of the given type to be injected with the given value.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureProperty``1(System.String,System.Object)">
            <summary>
            Configures the given property of the given type to be injected with the given value.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton``1(``0)">
            <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent``1">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent(System.Type)">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Container">
            <summary>
            The container that will be used to create objects and configure components.
            </summary>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Synchronized">
            <summary>
            Used for multi-threaded rich clients to build and dispatch
            in a synchronization domain.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IComponentConfig">
            <summary>
            Used to configure the values to be set for the various
            properties on a component.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IComponentConfig.ConfigureProperty(System.String,System.Object)">
            <summary>
            Configures the value of the named property of the component.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IComponentConfig`1">
            <summary>
            Strongly typed version of IComponentConfig
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IComponentConfig`1.ConfigureProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Configures the value of the property like so:
            ConfigureProperty(o => o.Property, value);
            </summary>
        </member>
        <member name="T:NServiceBus.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.form_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:NServiceBus.InMemory.SagaPersister.InMemorySagaPersister">
            <summary>
            In memory implementation of ISagaPersister for quick development.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.PropertySagaFinder`1">
            <summary>
            Finds the given type of saga by looking it up based on the given property.
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Binary.BinaryMessageSerializer">
            <summary>
            Binary implementation of the message serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Binary.BinaryMessageSerializer.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:NServiceBus.Serializers.Binary.BinaryMessageSerializer"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Binary.BinaryMessageSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given set of messages into the given stream.
            </summary>
            <param name="message">Message to serialize.</param>
            <param name="stream">Stream for <paramref name="message"/> to be serialized into.</param>
        </member>
        <member name="M:NServiceBus.Serializers.Binary.BinaryMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypes">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="P:NServiceBus.Serializers.Binary.BinaryMessageSerializer.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to 
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Binary.SimpleMessageMapper">
            <summary>
            Simple implementation of message mapper for binary serialization.
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Json.BsonMessageSerializer">
            <summary>
            BSON message serializer.
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Json.JsonMessageSerializerBase">
            <summary>
            JSON and BSON base class for <see cref="T:NServiceBus.Serialization.IMessageSerializer"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Ctor
            </summary>
            <param name="messageMapper"></param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given set of messages into the given stream.
            </summary>
            <param name="message">Message to serialize.</param>
            <param name="stream">Stream for <paramref name="message"/> to be serialized into.</param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypes">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.GetContentType">
            <summary>
            Returns the supported content type
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.CreateJsonWriter(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonWriter"/> from a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to create the <see cref="T:Newtonsoft.Json.JsonWriter"/> for.</param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.CreateJsonReader(System.IO.Stream)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonReader"/> from a <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to create the <see cref="T:Newtonsoft.Json.JsonReader"/> for.</param>
        </member>
        <member name="P:NServiceBus.Serializers.Json.JsonMessageSerializerBase.SkipArrayWrappingForSingleMessages">
            <summary>
            Removes the wrapping array if serializing a single message 
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.Json.JsonMessageSerializerBase.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to 
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.BsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.BsonMessageSerializer.CreateJsonWriter(System.IO.Stream)">
            <summary>
            Creates the writer
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.BsonMessageSerializer.CreateJsonReader(System.IO.Stream)">
            <summary>
            Creates the reader
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.BsonMessageSerializer.GetContentType">
            <summary>
            Gets the supported content type
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Json.JsonMessageSerializer">
            <summary>
            JSON message serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.CreateJsonWriter(System.IO.Stream)">
            <summary>
            Creates the writer
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.CreateJsonReader(System.IO.Stream)">
            <summary>
            Creates the reader
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.DeserializeObject(System.String,System.Type)">
            <summary>
            Non strongly typed deserialization
            </summary>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.SerializeObject(System.Object)">
            <summary>
            Serializes the given object to a json string
            </summary>
            <param name="value">The actual object</param>
            <returns>The json string</returns>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.GetContentType">
            <summary>
            Returns the supported content type
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.Json.JsonMessageSerializer.Encoding">
            <summary>
            Gets or sets the stream encoding
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.XML.Config.MessageTypesInitializer">
            <summary>
            Initializes the mapper and the serializer with the found message types
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.XML.XmlMessageSerializer">
            <summary>
            Implementation of the message serializer over XML supporting interface-based messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.InitType(System.Type)">
            <summary>
            Scans the given type storing maps to fields and properties to save on reflection at runtime.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.GetAllPropertiesForType(System.Type,System.Boolean)">
            <summary>
            Gets a PropertyInfo for each property of the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypesToDeserialize">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the given messages to the given stream.
            </summary>
        </member>
        <member name="F:NServiceBus.Serializers.XML.XmlMessageSerializer.prefixesToNamespaces">
            <summary>
            Used for deserialization
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper,NServiceBus.Conventions)">
            <summary>
            Initializes an instance of a <see cref="T:NServiceBus.Serializers.XML.XmlMessageSerializer"/>.
            </summary>
            <param name="mapper">Message Mapper</param>
            <param name="conventions">The endpoint conventions.</param>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initialized the serializer with the given message types
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.Namespace">
            <summary>
            The namespace to place in outgoing XML.
            <para>If the provided namespace ends with trailing forward slashes, those will be removed on the fly.</para>
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SanitizeInput">
            <summary>
            If true, then the serializer will use a sanitizing stream to skip invalid characters from the stream before parsing
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SkipWrappingRawXml">
            <summary>
            Removes the wrapping of properties containing XDocument or XElement with property name as root element
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.ContentType">
            <summary>
            Supported content type
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.XML.XmlSanitizingStream">
            <summary>
            A StreamReader that excludes XML-illegal characters while reading.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.IsLegalXmlChar(System.Int32)">
            <summary>
            Get whether an integer represents a legal XML 1.0 character. See the  
            specification at w3.org for these characters.
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.TransactionSettings">
            <summary>
                Configuration class for Transaction settings.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.Disable">
            <summary>
                Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> not to not use any transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.Enable">
            <summary>
                Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> to use transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.IsolationLevel(System.Transactions.IsolationLevel)">
            <summary>
                Sets the isolation level of the transaction.
            </summary>
            <param name="isolationLevel">
                A <see cref="M:NServiceBus.Settings.TransactionSettings.IsolationLevel(System.Transactions.IsolationLevel)"/> enumeration that specifies the isolation level of the
                transaction.
            </param>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.DisableDistributedTransactions">
            <summary>
                Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> not to enlist in Distributed Transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.EnableDistributedTransactions">
            <summary>
                Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> to enlist in Distributed Transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.DoNotWrapHandlersExecutionInATransactionScope">
            <summary>
                Configures this endpoint so that <see cref="T:NServiceBus.IHandleMessages`1">handlers</see> are not wrapped in a
                <see cref="T:System.Transactions.TransactionScope"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.WrapHandlersExecutionInATransactionScope">
            <summary>
                Configures this endpoint so that <see cref="T:NServiceBus.IHandleMessages`1">handlers</see> not wrapped in a
                <see cref="T:System.Transactions.TransactionScope"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.DefaultTimeout(System.TimeSpan)">
            <summary>
                Sets the default timeout period for the transaction.
            </summary>
            <param name="defaultTimeout">
                A <see cref="T:System.TimeSpan"/> value that specifies the default timeout period for the
                transaction.
            </param>
        </member>
        <member name="T:NServiceBus.Timeout.Core.IPersistTimeouts">
            <summary>
            Timeout persister contract.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.GetNextChunk(System.DateTime,System.DateTime@)">
            <summary>
            Retrieves the next range of timeouts that are due.
            </summary>
            <param name="startSlice">The time where to start retrieving the next slice, the slice should exclude this date.</param>
            <param name="nextTimeToRunQuery">Returns the next time we should query again.</param>
            <returns>Returns the next range of timeouts that are due.</returns>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.Add(NServiceBus.Timeout.Core.TimeoutData)">
            <summary>
            Adds a new timeout.
            </summary>
            <param name="timeout">Timeout data.</param>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.TryRemove(System.String,NServiceBus.Timeout.Core.TimeoutData@)">
            <summary>
            Removes the timeout if it hasn't been previously removed.
            </summary>
            <param name="timeoutId">The timeout id to remove.</param>
            <param name="timeoutData">The timeout data of the removed timeout.</param>
            <returns><c>true</c> it the timeout was successfully removed.</returns>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.RemoveTimeoutBy(System.Guid)">
            <summary>
            Removes the time by saga id.
            </summary>
            <param name="sagaId">The saga id of the timeouts to remove.</param>
        </member>
        <member name="T:NServiceBus.Timeout.Core.TimeoutData">
            <summary>
            Holds timeout information.
            </summary>
        </member>
        <member name="F:NServiceBus.Timeout.Core.TimeoutData.OriginalReplyToAddress">
            <summary>
            Original ReplyTo address header.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToTransportMessage">
            <summary>
            Transforms the timeout to a <see cref="T:NServiceBus.TransportMessage"/>.
            </summary>
            <returns>Returns a <see cref="T:NServiceBus.TransportMessage"/>.</returns>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToSendOptions(NServiceBus.Address)">
            <summary>
            Transforms the timeout to send options.
            </summary>
            <param name="replyToAddress">The reply address to use for outgoing messages</param>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Id">
            <summary>
            Id of this timeout
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Destination">
            <summary>
            The address of the client who requested the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.SagaId">
            <summary>
            The saga ID.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.State">
            <summary>
            Additional state.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Time">
            <summary>
            The time at which the timeout expires.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.OwningTimeoutManager">
            <summary>
            The timeout manager that owns this particular timeout
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Headers">
            <summary>
            Store the headers to preserve them across timeouts
            </summary>
        </member>
        <member name="T:NServiceBus.TransportMessage">
            <summary>
                An envelope used by NServiceBus to package messages for transmission.
            </summary>
            <remarks>
                All messages sent and received by NServiceBus are wrapped in this class.
                More than one message can be bundled in the envelope to be transmitted or
                received by the bus.
            </remarks>
        </member>
        <member name="M:NServiceBus.TransportMessage.#ctor">
            <summary>
                Initializes the transport message with a CombGuid as identifier
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Creates a new TransportMessage with the given id and headers
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String},NServiceBus.Address)">
            <summary>
                Creates a new TransportMessage with the given id and headers and reply to address
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.ChangeMessageId(System.String)">
            <summary>
                Use this method to change the stable ID of the given message.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.UpdateBody(System.Byte[])">
            <summary>
                Use this method to update the body if this message
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.RevertToOriginalBodyIfNeeded">
            <summary>
                Makes sure that the body is reset to the exact state as it was when the message was created
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Id">
            <summary>
                Gets/sets the identifier of this message bundle.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.CorrelationId">
            <summary>
                Gets/sets the unique identifier of another message bundle
                this message bundle is associated with.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.ReplyToAddress">
            <summary>
                Gets/sets the reply-to address of the message bundle - replaces 'ReturnAddress'.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Recoverable">
            <summary>
                Gets/sets whether or not the message is supposed to
                be guaranteed deliverable.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.MessageIntent">
            <summary>
                Indicates to the infrastructure the message intent (publish, or regular send).
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.TimeToBeReceived">
            <summary>
                Gets/sets the maximum time limit in which the message bundle
                must be received.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Headers">
            <summary>
                Gets/sets other applicative out-of-band information.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Body">
            <summary>
                Gets/sets a byte array to the body content of the message
            </summary>
        </member>
        <member name="F:NServiceBus.Licensing.LicenseExpiredForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NServiceBus.Licensing.LicenseExpiredForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NServiceBus.Licensing.LicenseExpiredForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BackwardCompatibility.MutateMessageContentTypeOfIncomingTransportMessages.MutateIncoming(NServiceBus.TransportMessage)">
            <summary>
            Ensure that the content type which is introduced in V4.0.0 and later versions is present in the header.
            </summary>
            <param name="transportMessage">Transport Message to mutate.</param>
        </member>
        <member name="T:NServiceBus.Unicast.BuilderExtensions">
            <summary>
            Extension methods for IBuilder
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BuilderExtensions.ForEach``1(NServiceBus.ObjectBuilder.IBuilder,System.Action{``0})">
            <summary>
            Applies the action on the instances of T
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.BusAsyncResult">
            <summary>
            Implementation of IAsyncResult returned when registering a callback.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BusAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Creates a new object storing the given callback and state.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BusAsyncResult.Complete(System.Int32,System.Object[])">
            <summary>
            Stores the given error code and messages, 
            releases any blocked threads,
            and invokes the previously given callback.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncState">
            <summary>
            Returns a completion result containing the error code, messages, and state.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncWaitHandle">
            <summary>
            Returns a handle suitable for blocking threads.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.CompletedSynchronously">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.IsCompleted">
            <summary>
            Returns if the operation has completed.
            </summary>
        </member>
        <member name="T:NServiceBus.Callback">
            <summary>
            Implementation of the <see cref="T:NServiceBus.ICallback"/> interface for the unicast bus.
            </summary>
        </member>
        <member name="M:NServiceBus.Callback.#ctor(System.String)">
            <summary>
            Creates a new instance of the callback object storing the given message id.
            </summary>
        </member>
        <member name="E:NServiceBus.Callback.Registered">
            <summary>
            Event raised when the Register method is called.
            </summary>
        </member>
        <member name="P:NServiceBus.Callback.MessageId">
            <summary>
            Returns the message id this object was constructed with.
            </summary>
        </member>
        <member name="T:NServiceBus.BusAsyncResultEventArgs">
            <summary>
            Argument passed in the Registered event of the Callback object.
            </summary>
        </member>
        <member name="P:NServiceBus.BusAsyncResultEventArgs.Result">
            <summary>
            Gets/sets the IAsyncResult.
            </summary>
        </member>
        <member name="P:NServiceBus.BusAsyncResultEventArgs.MessageId">
            <summary>
            Gets/sets the message id.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessagesEventArgs">
            <summary>
            Data containing multiple messages for raising in events.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessagesEventArgs.#ctor(System.Object[])">
            <summary>
            Instantiate an event arg referencing multiple messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.MessagesEventArgs.Messages">
            <summary>
            The messages that were sent.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.StorageDrivenPublishing">
            <summary>
            Adds support for pub/sub using a external subscription storage. This brings pub/sub to transport that lacks native support.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.StorageDrivenPublishing.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Features.MessageDrivenSubscriptions">
            <summary>
            Used to configure Message Driven Subscriptions
            </summary>
        </member>
        <member name="M:NServiceBus.Features.MessageDrivenSubscriptions.Setup(NServiceBus.Features.FeatureConfigurationContext)">
            <summary>
            See <see cref="M:NServiceBus.Features.Feature.Setup(NServiceBus.Features.FeatureConfigurationContext)"/>
            </summary>
        </member>
        <member name="T:NServiceBus.AutomaticSubscriptions.AutoSubscriptionStrategy">
            <summary>
            The default strategy for auto subscriptions.
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.AutoSubscriptionStrategy.HandlerRegistry">
            <summary>
            The known handlers
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.AutoSubscriptionStrategy.MessageRouter">
            <summary>
            The message routing
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.AutoSubscriptionStrategy.DoNotRequireExplicitRouting">
            <summary>
            If set to true the endpoint will subscribe to it self even if no endpoint mappings exists
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.AutoSubscriptionStrategy.DoNotAutoSubscribeSagas">
            <summary>
            if true messages that are handled by sagas wont be auto subscribed
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.AutoSubscriptionStrategy.SubscribePlainMessages">
            <summary>
            If true all messages that are not commands will be auto subscribed
            </summary>
        </member>
        <member name="T:NServiceBus.AutomaticSubscriptions.IAutoSubscriptionStrategy">
            <summary>
            Abstracts the strategy for selecting which events to auto-subscribe to during startup
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.IAutoSubscriptionStrategy.GetEventsToSubscribe">
            <summary>
            Returns the list of events to auto-subscribe
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessageContext">
            <summary>
            Implementation of IMessageContext
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageContext.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes message context from the transport message.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.MessageContext.TimeSent">
            <summary>
            The time at which the incoming message was sent
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessageEventArgs">
            <summary>
            Data containing a message for raising in events.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageEventArgs.#ctor(System.Object)">
            <summary>
            Instantiates a new object containing the given message.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.MessageEventArgs.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Messages.MessageMetadataRegistry">
            <summary>
                Cache of message metadata.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.MessageMetadataRegistry.GetMessageMetadata(System.Type)">
            <summary>
                Retrieves the <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata"/> for the specified type.
            </summary>
            <param name="messageType">The message type to retrieve metadata for.</param>
            <returns>The <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata"/> for the specified type.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.MessageMetadataRegistry.GetMessageMetadata(System.String)">
            <summary>
                Retrieves the <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata"/> for the message identifier.
            </summary>
            <param name="messageTypeIdentifier">The message identifier to retrieve metadata for.</param>
            <returns>The <see cref="T:NServiceBus.Unicast.Messages.MessageMetadata"/> for the specified type.</returns>
        </member>
        <member name="T:NServiceBus.Unicast.Messages.MessageMetadata">
            <summary>
            Message metadata class.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Messages.MessageMetadata.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.MessageMetadata.MessageType">
            <summary>
            The <see cref="T:System.Type"/> of the message instance.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.MessageMetadata.Recoverable">
            <summary>
                Gets whether or not the message is supposed to be guaranteed deliverable.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.MessageMetadata.TimeToBeReceived">
            <summary>
                Gets the maximum time limit in which the message must be received.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Messages.MessageMetadata.MessageHierarchy">
            <summary>
            The message instance hierarchy.
            </summary>
        </member>
        <member name="T:NServiceBus.CriticalTimeCalculator">
            <summary>
                Performance counter for the critical time
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Monitoring.CausationMutator">
            <summary>
            Mutator to set the related to header
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.CausationMutator.MutateOutgoing(NServiceBus.Unicast.Messages.LogicalMessage,NServiceBus.TransportMessage)">
            <summary>
            Keeps track of related messages to make auditing possible
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.CausationMutator.Customize(NServiceBus.BusConfiguration)">
            <summary>
            Initializes 
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Monitoring.CausationMutator.Bus">
            <summary>
            The bus is needed to get access to the current message id
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Installers.EndpointInputQueueCreator.Address">
            <summary>
            Endpoint input name
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.QueueNotFoundException">
            <summary>
            Thrown when the queue could not be found
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.#ctor(NServiceBus.Address,System.String,System.Exception)">
            <summary>
            Ctor
            </summary>
            <param name="queue"></param>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Ctor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueueNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data for serialization purposes
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.QueueNotFoundException.Queue">
            <summary>
            The queue address
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Routing.StaticMessageRouter">
            <summary>
                The default message router
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Routing.StaticMessageRouter.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
                Initializes the router with all known messages
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Routing.StaticMessageRouter.GetDestinationFor(System.Type)">
            <summary>
            Returns all the routes for a given message
            </summary>
            <param name="messageType">The <see cref="T:System.Type"/> of the message to get the destination <see cref="T:NServiceBus.Address"/> list for.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Routing.StaticMessageRouter.RegisterEventRoute(System.Type,NServiceBus.Address)">
            <summary>
            Registers a route for the given event
            </summary>
            <param name="eventType">The <see cref="T:System.Type"/> of the event</param>
            <param name="endpointAddress">The <see cref="T:NServiceBus.Address"/> representing the logical owner for the event</param>
        </member>
        <member name="M:NServiceBus.Unicast.Routing.StaticMessageRouter.RegisterMessageRoute(System.Type,NServiceBus.Address)">
            <summary>
            Registers a route for the given message type
            </summary>
            <param name="messageType">The message type</param>
            <param name="endpointAddress">The address of the logical owner</param>
        </member>
        <member name="P:NServiceBus.Unicast.Routing.StaticMessageRouter.SubscribeToPlainMessages">
            <summary>
            Set to true if the router should autosubscribe messages not defined as events
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.IMessageHandlerRegistry">
            <summary>
            The registry that keeps track of all known message handlers
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.GetHandlerTypes(System.Type)">
            <summary>
            Gets the list of <see cref="T:NServiceBus.IHandleMessages`1"/> <see cref="T:System.Type"/>s for the given <paramref name="messageType"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.GetMessageTypes">
            <summary>
            Lists all message type for which we have handlers
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.InvokeHandle(System.Object,System.Object)">
            <summary>
            Invokes the handle method of the given handler passing the message
            </summary>
            <param name="handler">The handler instance.</param>
            <param name="message">The message instance.</param>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.InvokeTimeout(System.Object,System.Object)">
            <summary>
            Invokes the timeout method of the given handler passing the message
            </summary>
            <param name="handler">The handler instance.</param>
            <param name="state">The message instance.</param>
        </member>
        <member name="T:NServiceBus.Unicast.MessageHandlerRegistry">
            <summary>
                Maintains the message handlers for this endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetHandlerTypes(System.Type)">
            <summary>
                Gets the list of <see cref="T:NServiceBus.IHandleMessages`1"/> <see cref="T:System.Type"/>s for the given
                <paramref name="messageType"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetMessageTypes">
            <summary>
                Lists all message type for which we have handlers
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.RegisterHandler(System.Type)">
            <summary>
                Registers the given message handler type
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.InvokeHandle(System.Object,System.Object)">
            <summary>
            Invokes the handle method of the given handler passing the message
            </summary>
            <param name="handler">The handler instance.</param>
            <param name="message">The message instance.</param>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.InvokeTimeout(System.Object,System.Object)">
            <summary>
            Invokes the timeout method of the given handler passing the message
            </summary>
            <param name="handler">The handler instance.</param>
            <param name="state">The message instance.</param>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.CacheMethodForHandler(System.Type,System.Type)">
            <summary>
            Registers the method in the cache
            </summary>
            <param name="handler">The object type.</param>
            <param name="messageType">the message type.</param>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs">
            <summary>
            Contains which client subscribed to which message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs.SubscriberReturnAddress">
            <summary>
            The address of the subscriber.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs.MessageType">
            <summary>
            The type of message the client subscribed to.
            </summary>
        </member>
        <member name="T:NServiceBus.InMemory.SubscriptionStorage.InMemorySubscriptionStorage">
            <summary>
            In memory implementation of the subscription storage
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage">
            <summary>
            Defines storage for subscriptions
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Subscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
            <summary>
            Subscribes the given client address to messages of the given types.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Unsubscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
            <summary>
            Unsubscribes the given client address from messages of the given types.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.GetSubscriberAddressesForMessage(System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
            <summary>
            Returns a list of addresses of subscribers that previously requested to be notified
            of messages of the given message types.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Init">
            <summary>
            Notifies the subscription storage that now is the time to perform
            any initialization work
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageType">
            <summary>
            Representation of a message type that clients can be subscribed to
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.Type)">
            <summary>
            Initializes the message type from the given type
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String)">
            <summary>
            Initializes the message type from the given string. 
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.String)">
            <summary>
            Initializes the message type from the given string. 
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.Version)">
            <summary>
            Initializes the message type from the given string. 
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.ToString">
            <summary>
            Overridden to append Version along with Type Name
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality, only major version is used
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(System.Object)">
            <summary>
            Equality, only Type is same
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.GetHashCode">
            <summary>
            Gets Hash Code
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Equality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Inequality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.TypeName">
            <summary>
            TypeName of the message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.Version">
            <summary>
            Version of the message
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry">
            <summary>
            Describes an entry in the list of subscriptions.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry.MessageType">
            <summary>
            Gets the message type for the subscription entry.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry.Subscriber">
            <summary>
            Gets the subscription request message.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage">
            <summary>
            Provides functionality for managing message subscriptions
            using MSMQ.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.ConfigurationIsWrong">
            <summary>
            Checks if configuration is wrong - endpoint isn't transactional and
            object isn't configured to handle own transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.Add(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Adds a message to the subscription store.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.Remove(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Removes a message from the subscription store.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.GetTransactionType">
            <summary>
            Returns the transaction type (automatic or single) that should be used
            based on the configuration of enlisting into external transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.AddToLookup(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType,System.String)">
            <summary>
            Adds a message to the lookup to find message from
            subscriber, to message type, to message id
            </summary>
        </member>
        <member name="F:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.lookup">
            <summary>
            lookup from subscriber, to message type, to message id
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.DontUseExternalTransaction">
            <summary>
            Gets/sets whether or not to use a transaction started outside the
            subscription store.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.SubscriptionStorage.MsmqSubscriptionStorage.Queue">
            <summary>
            Sets the address of the queue where subscription messages will be stored.
            For a local queue, just use its name - msmq specific info isn't needed.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.ControlMessage">
            <summary>
            Helper for creating control messages
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ControlMessage.Create">
            <summary>
            Creates Transport Message
            </summary>
            <returns>Transport Message</returns>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs">
            <summary>
            Defines the event data for the failed message processing event
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.#ctor(NServiceBus.TransportMessage,System.Exception)">
            <summary>
            Initialized the event arg with the actual exception
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.Reason">
            <summary>
            The exception that caused the processing to fail
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.ITransport">
            <summary>
            Defines the basic functionality of a transport to be used by NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.Start(NServiceBus.Address)">
            <summary>
            Starts the transport listening for messages on the given local address.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeMaximumConcurrencyLevel(System.Int32)">
            <summary>
            Updates the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
            <param name="maximumConcurrencyLevel">The new maximum concurrency level for this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/>.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeMaximumMessageThroughputPerSecond(System.Int32)">
            <summary>
            Updates the max throughput per second.
            </summary>
            <param name="maximumMessageThroughputPerSecond">The new max throughput.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.AbortHandlingCurrentMessage">
            <summary>
            Causes the current message being handled to return to the queue.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.Stop">
            <summary>
            Stops the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.ITransport.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.ITransport.MaximumMessageThroughputPerSecond">
            <summary>
            Gets the receiving messages rate.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived">
            <summary>
            Raised when a message is received.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing">
            <summary>
            Raised when a message is available but before <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived"/> is raised.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.FinishedMessageProcessing">
            <summary>
            Raised after message processing was completed, even in case of an exception in message processing.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.FailedMessageProcessing">
            <summary>
            Raised if an exception was encountered at any point in the processing - including
            when the transaction commits.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs">
            <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing"/> event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
            <param name="m">The message that was received.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.FinishedMessageProcessingEventArgs">
            <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.FinishedMessageProcessing"/> event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.FinishedMessageProcessingEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes a new FinishedMessageProcessingEventArgs.
            </summary>
            <param name="m">The message that was received.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.FinishedMessageProcessingEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.ThroughputLimiter">
            <summary>
                Support for throughput limitation of the transport
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportReceiver">
            <summary>
                The default implementation of <see cref="T:NServiceBus.Unicast.Transport.ITransport"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.#ctor(NServiceBus.Unicast.Transport.TransactionSettings,System.Int32,System.Int32,NServiceBus.Transports.IDequeueMessages,NServiceBus.Faults.IManageMessageFailures,NServiceBus.Settings.ReadOnlySettings,NServiceBus.Configure)">
            <summary>
            Creates an instance of <see cref="T:NServiceBus.Unicast.Transport.TransportReceiver"/>
            </summary>
            <param name="transactionSettings">The transaction settings to use for this <see cref="T:NServiceBus.Unicast.Transport.TransportReceiver"/>.</param>
            <param name="maximumConcurrencyLevel">The maximum number of messages to process in parallel.</param>
            <param name="maximumThroughput">The maximum throughput per second, 0 means unlimited.</param>
            <param name="receiver">The <see cref="T:NServiceBus.Transports.IDequeueMessages"/> instance to use.</param>
            <param name="manageMessageFailures">The <see cref="T:NServiceBus.Faults.IManageMessageFailures"/> instance to use.</param>
            <param name="settings">The current settings</param>
            <param name="config">Configure instance</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeMaximumConcurrencyLevel(System.Int32)">
            <summary>
                Updates the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
            <param name="maximumConcurrencyLevel">The new maximum concurrency level for this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/>.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeMaximumMessageThroughputPerSecond(System.Int32)">
            <summary>
            Updates the MaximumMessageThroughputPerSecond setting.
            </summary>
            <param name="maximumMessageThroughputPerSecond">The new value.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.Start(NServiceBus.Address)">
            <summary>
            Starts the transport listening for messages on the given local address.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.AbortHandlingCurrentMessage">
            <summary>
                Causes the processing of the current message to be aborted.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.Stop">
            <summary>
                Stops the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.Receiver">
            <summary>
                The receiver responsible for notifying the transport when new messages are available
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.FailureManager">
            <summary>
                Manages failed message processing.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.StartedMessageProcessing">
            <summary>
                Event which indicates that message processing has started.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.FinishedMessageProcessing">
            <summary>
                Event which indicates that message processing has completed.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.FailedMessageProcessing">
            <summary>
                Event which indicates that message processing failed for some reason.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaximumConcurrencyLevel">
            <summary>
                Gets the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaximumMessageThroughputPerSecond">
            <summary>
                Gets the receiving messages rate.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.TransportMessageReceived">
            <summary>
                Event raised when a message has been received in the input queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.TransactionSettings">
            <summary>
            The <see cref="P:NServiceBus.Unicast.Transport.TransportReceiver.TransactionSettings"/> being used.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransactionSettings">
            <summary>
            Settings relates to transactions
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransactionSettings.#ctor(System.Boolean,System.TimeSpan,System.Transactions.IsolationLevel,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a new settings
            </summary>
            <param name="isTransactional">Is transactions on</param>
            <param name="transactionTimeout">The tx timeout</param>
            <param name="isolationLevel">The isolation level</param>
            <param name="maxRetries">The number of FLR retries</param>
            <param name="suppressDistributedTransactions">Should DTC be suppressed</param>
            <param name="doNotWrapHandlersExecutionInATransactionScope">Should handlers be wrapped</param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional">
            <summary>
            Sets whether or not the transport is transactional.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.TransactionTimeout">
            <summary>
            Property for getting/setting the period of time when the transaction times out.
            Only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional"/> is set to true.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.IsolationLevel">
            <summary>
            Property for getting/setting the isolation level of the transaction scope.
            Only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional"/> is set to true.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.MaxRetries">
            <summary>
            Sets the maximum number of times a message will be retried
            when an exception is thrown as a result of handling the message.
            This value is only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional"/> is true.
            </summary>
            <remarks>
            Default value is 5.
            </remarks>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.SuppressDistributedTransactions">
            <summary>
            If true the transport won't enlist in distributed transactions
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.DoNotWrapHandlersExecutionInATransactionScope">
            <summary>
            Controls if the message handlers should be wrapped in a <see cref="T:System.Transactions.TransactionScope"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs">
            <summary>
                Provides data for the MessageDequeued event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
                Default constructor for <see cref="T:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs"/>.
            </summary>
            <param name="m">
                The received <see cref="T:NServiceBus.TransportMessage"/>.
            </param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs.Message">
            <summary>
                The received <see cref="T:NServiceBus.TransportMessage"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs">
            <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived"/> event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
            <param name="m">The message that was received.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="T:NServiceBus.UnitOfWork.IManageUnitsOfWork">
            <summary>
            Interface used by NServiceBus to manage units of work as a part of the
            message processing pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.Begin">
            <summary>
            Called before all message handlers and modules
            </summary>
        </member>
        <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.End(System.Exception)">
            <summary>
            Called after all message handlers and modules, if an error has occurred the exception will be passed
            </summary>
        </member>
        <member name="T:NServiceBus.CircuitBreakers.CircuitBreaker">
            <summary>
            A circuit breaker implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.CircuitBreaker.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Create a <see cref="T:NServiceBus.CircuitBreakers.CircuitBreaker"/>.
            </summary>
            <param name="threshold">Number of triggers before it fires.</param>
            <param name="resetEvery">The <see cref="T:System.TimeSpan"/> to wait before resetting the <see cref="T:NServiceBus.CircuitBreakers.CircuitBreaker"/>.</param>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.CircuitBreaker.Execute(System.Action)">
            <summary>
            Method to execute.
            </summary>
            <param name="trigger">The callback to execute.</param>
        </member>
        <member name="T:NServiceBus.CircuitBreakers.RepeatedFailuresOverTimeCircuitBreaker">
            <summary>
            A circuit breaker that triggers after a given time 
            </summary>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.RepeatedFailuresOverTimeCircuitBreaker.#ctor(System.String,System.TimeSpan,System.Action{System.Exception})">
            <summary>
            Ctor
            </summary>
            <param name="name"></param>
            <param name="timeToWaitBeforeTriggering"></param>
            <param name="triggerAction"></param>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.RepeatedFailuresOverTimeCircuitBreaker.#ctor(System.String,System.TimeSpan,System.Action{System.Exception},System.TimeSpan)">
            <summary>
            Ctor
            </summary>
            <param name="name"></param>
            <param name="timeToWaitBeforeTriggering"></param>
            <param name="triggerAction"></param>
            <param name="delayAfterFailure"></param>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.RepeatedFailuresOverTimeCircuitBreaker.Success">
            <summary>
            Tell the CB that it should disarm
            </summary>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.RepeatedFailuresOverTimeCircuitBreaker.Failure(System.Exception)">
            <summary>
            Tells the CB to arm
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.RepeatedFailuresOverTimeCircuitBreaker.Dispose">
            <summary>
            Disposes the CB
            </summary>
        </member>
        <member name="T:NServiceBus.FileVersionRetriever">
            <summary>
            Helper class to retrieve File version.
            </summary>
        </member>
        <member name="M:NServiceBus.FileVersionRetriever.GetFileVersion(System.Type)">
            <summary>
            Retrieves a semver compliant version from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to retrieve version from.</param>
            <returns>SemVer compliant version.</returns>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsSimpleType(System.Type)">
            <summary>
            Returns true if the type can be serialized as is.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.SerializationFriendlyName(System.Type)">
            <summary>
            Takes the name of the given type and makes it friendly for serialization
            by removing problematic characters.
            </summary>
        </member>
        <member name="T:NServiceBus.WireEncryptedString">
            <summary>
            A string whose value will be encrypted when sent over the wire.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializing constructor
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.op_Implicit(NServiceBus.WireEncryptedString)~System.String">
            <summary>
            Gets the string value from the WireEncryptedString.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.op_Implicit(System.String)~NServiceBus.WireEncryptedString">
            <summary>
            Creates a new WireEncryptedString from the given string.
            </summary>
        </member>
        <member name="M:NServiceBus.WireEncryptedString.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method for making default XML serialization work properly for this type.
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.Value">
            <summary>
            The unencrypted string.
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.EncryptedValue">
            <summary>
            The encrypted value of this string
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.EncryptedBase64Value">
            <summary>
            Only kept for backwards compatibility reasons
            </summary>
        </member>
        <member name="P:NServiceBus.WireEncryptedString.Base64Iv">
            <summary>
            Only kept for backwards compatibility reasons
            </summary>
        </member>
    </members>
</doc>
